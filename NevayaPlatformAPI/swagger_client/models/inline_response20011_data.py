# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20011Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channels': 'ChannelsResponse',
        'movies': 'MoviesResponse',
        'sources': 'list[Source]',
        'videos': 'list[Video]',
        'applications': 'list[ReceiverApplication]'
    }

    attribute_map = {
        'channels': 'channels',
        'movies': 'movies',
        'sources': 'sources',
        'videos': 'videos',
        'applications': 'applications'
    }

    def __init__(self, channels=None, movies=None, sources=None, videos=None, applications=None):  # noqa: E501
        """InlineResponse20011Data - a model defined in Swagger"""  # noqa: E501
        self._channels = None
        self._movies = None
        self._sources = None
        self._videos = None
        self._applications = None
        self.discriminator = None
        if channels is not None:
            self.channels = channels
        if movies is not None:
            self.movies = movies
        if sources is not None:
            self.sources = sources
        if videos is not None:
            self.videos = videos
        if applications is not None:
            self.applications = applications

    @property
    def channels(self):
        """Gets the channels of this InlineResponse20011Data.  # noqa: E501


        :return: The channels of this InlineResponse20011Data.  # noqa: E501
        :rtype: ChannelsResponse
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this InlineResponse20011Data.


        :param channels: The channels of this InlineResponse20011Data.  # noqa: E501
        :type: ChannelsResponse
        """

        self._channels = channels

    @property
    def movies(self):
        """Gets the movies of this InlineResponse20011Data.  # noqa: E501


        :return: The movies of this InlineResponse20011Data.  # noqa: E501
        :rtype: MoviesResponse
        """
        return self._movies

    @movies.setter
    def movies(self, movies):
        """Sets the movies of this InlineResponse20011Data.


        :param movies: The movies of this InlineResponse20011Data.  # noqa: E501
        :type: MoviesResponse
        """

        self._movies = movies

    @property
    def sources(self):
        """Gets the sources of this InlineResponse20011Data.  # noqa: E501


        :return: The sources of this InlineResponse20011Data.  # noqa: E501
        :rtype: list[Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this InlineResponse20011Data.


        :param sources: The sources of this InlineResponse20011Data.  # noqa: E501
        :type: list[Source]
        """

        self._sources = sources

    @property
    def videos(self):
        """Gets the videos of this InlineResponse20011Data.  # noqa: E501


        :return: The videos of this InlineResponse20011Data.  # noqa: E501
        :rtype: list[Video]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this InlineResponse20011Data.


        :param videos: The videos of this InlineResponse20011Data.  # noqa: E501
        :type: list[Video]
        """

        self._videos = videos

    @property
    def applications(self):
        """Gets the applications of this InlineResponse20011Data.  # noqa: E501


        :return: The applications of this InlineResponse20011Data.  # noqa: E501
        :rtype: list[ReceiverApplication]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this InlineResponse20011Data.


        :param applications: The applications of this InlineResponse20011Data.  # noqa: E501
        :type: list[ReceiverApplication]
        """

        self._applications = applications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20011Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
