# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MinibarRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'minibar_rights': 'str'
    }

    attribute_map = {
        'minibar_rights': 'minibar_rights'
    }

    def __init__(self, minibar_rights='normal'):  # noqa: E501
        """MinibarRights - a model defined in Swagger"""  # noqa: E501
        self._minibar_rights = None
        self.discriminator = None
        if minibar_rights is not None:
            self.minibar_rights = minibar_rights

    @property
    def minibar_rights(self):
        """Gets the minibar_rights of this MinibarRights.  # noqa: E501

        Guests level of access to the minibar. Mappings to common PMS  **FIAS**  Minibar rights map to the `MR` field of an `RE` Fias message in the following way:  | Nevaya   | Fias | Description            | |----------|------|------------------------| | locked   | ML   | Lock minibar           | | unlocked | MU   | Unlock minibar         | | normal   | MN   | Minibar normal vending |  # noqa: E501

        :return: The minibar_rights of this MinibarRights.  # noqa: E501
        :rtype: str
        """
        return self._minibar_rights

    @minibar_rights.setter
    def minibar_rights(self, minibar_rights):
        """Sets the minibar_rights of this MinibarRights.

        Guests level of access to the minibar. Mappings to common PMS  **FIAS**  Minibar rights map to the `MR` field of an `RE` Fias message in the following way:  | Nevaya   | Fias | Description            | |----------|------|------------------------| | locked   | ML   | Lock minibar           | | unlocked | MU   | Unlock minibar         | | normal   | MN   | Minibar normal vending |  # noqa: E501

        :param minibar_rights: The minibar_rights of this MinibarRights.  # noqa: E501
        :type: str
        """
        allowed_values = ["locked", "unlocked", "normal"]  # noqa: E501
        if minibar_rights not in allowed_values:
            raise ValueError(
                "Invalid value for `minibar_rights` ({0}), must be one of {1}"  # noqa: E501
                .format(minibar_rights, allowed_values)
            )

        self._minibar_rights = minibar_rights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MinibarRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MinibarRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
