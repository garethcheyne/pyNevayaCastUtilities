# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20022DataDevThermos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_set_point': 'float',
        'actual_temp': 'float',
        'fan_speed': 'str',
        'set_point': 'float',
        'thermostat_id': 'str',
        'window_state': 'str',
        'valve_status': 'str'
    }

    attribute_map = {
        'active_set_point': 'ActiveSetPoint',
        'actual_temp': 'ActualTemp',
        'fan_speed': 'FanSpeed',
        'set_point': 'SetPoint',
        'thermostat_id': 'ThermostatId',
        'window_state': 'WindowState',
        'valve_status': 'ValveStatus'
    }

    def __init__(self, active_set_point=None, actual_temp=None, fan_speed=None, set_point=None, thermostat_id=None, window_state=None, valve_status=None):  # noqa: E501
        """InlineResponse20022DataDevThermos - a model defined in Swagger"""  # noqa: E501
        self._active_set_point = None
        self._actual_temp = None
        self._fan_speed = None
        self._set_point = None
        self._thermostat_id = None
        self._window_state = None
        self._valve_status = None
        self.discriminator = None
        if active_set_point is not None:
            self.active_set_point = active_set_point
        if actual_temp is not None:
            self.actual_temp = actual_temp
        if fan_speed is not None:
            self.fan_speed = fan_speed
        if set_point is not None:
            self.set_point = set_point
        if thermostat_id is not None:
            self.thermostat_id = thermostat_id
        if window_state is not None:
            self.window_state = window_state
        if valve_status is not None:
            self.valve_status = valve_status

    @property
    def active_set_point(self):
        """Gets the active_set_point of this InlineResponse20022DataDevThermos.  # noqa: E501

        Active setpoint is the current setpoint in the room. Which can be set-point forced by the Guest / Set-point forced from server in case of checked-out/Room is unoccupied.  # noqa: E501

        :return: The active_set_point of this InlineResponse20022DataDevThermos.  # noqa: E501
        :rtype: float
        """
        return self._active_set_point

    @active_set_point.setter
    def active_set_point(self, active_set_point):
        """Sets the active_set_point of this InlineResponse20022DataDevThermos.

        Active setpoint is the current setpoint in the room. Which can be set-point forced by the Guest / Set-point forced from server in case of checked-out/Room is unoccupied.  # noqa: E501

        :param active_set_point: The active_set_point of this InlineResponse20022DataDevThermos.  # noqa: E501
        :type: float
        """

        self._active_set_point = active_set_point

    @property
    def actual_temp(self):
        """Gets the actual_temp of this InlineResponse20022DataDevThermos.  # noqa: E501

        Room current temperature  # noqa: E501

        :return: The actual_temp of this InlineResponse20022DataDevThermos.  # noqa: E501
        :rtype: float
        """
        return self._actual_temp

    @actual_temp.setter
    def actual_temp(self, actual_temp):
        """Sets the actual_temp of this InlineResponse20022DataDevThermos.

        Room current temperature  # noqa: E501

        :param actual_temp: The actual_temp of this InlineResponse20022DataDevThermos.  # noqa: E501
        :type: float
        """

        self._actual_temp = actual_temp

    @property
    def fan_speed(self):
        """Gets the fan_speed of this InlineResponse20022DataDevThermos.  # noqa: E501

        The current fan mode  # noqa: E501

        :return: The fan_speed of this InlineResponse20022DataDevThermos.  # noqa: E501
        :rtype: str
        """
        return self._fan_speed

    @fan_speed.setter
    def fan_speed(self, fan_speed):
        """Sets the fan_speed of this InlineResponse20022DataDevThermos.

        The current fan mode  # noqa: E501

        :param fan_speed: The fan_speed of this InlineResponse20022DataDevThermos.  # noqa: E501
        :type: str
        """
        allowed_values = ["Low", "Medium", "High", "Auto", "Eco", "Off"]  # noqa: E501
        if fan_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `fan_speed` ({0}), must be one of {1}"  # noqa: E501
                .format(fan_speed, allowed_values)
            )

        self._fan_speed = fan_speed

    @property
    def set_point(self):
        """Gets the set_point of this InlineResponse20022DataDevThermos.  # noqa: E501

        Desired temperature set by the user  # noqa: E501

        :return: The set_point of this InlineResponse20022DataDevThermos.  # noqa: E501
        :rtype: float
        """
        return self._set_point

    @set_point.setter
    def set_point(self, set_point):
        """Sets the set_point of this InlineResponse20022DataDevThermos.

        Desired temperature set by the user  # noqa: E501

        :param set_point: The set_point of this InlineResponse20022DataDevThermos.  # noqa: E501
        :type: float
        """

        self._set_point = set_point

    @property
    def thermostat_id(self):
        """Gets the thermostat_id of this InlineResponse20022DataDevThermos.  # noqa: E501


        :return: The thermostat_id of this InlineResponse20022DataDevThermos.  # noqa: E501
        :rtype: str
        """
        return self._thermostat_id

    @thermostat_id.setter
    def thermostat_id(self, thermostat_id):
        """Sets the thermostat_id of this InlineResponse20022DataDevThermos.


        :param thermostat_id: The thermostat_id of this InlineResponse20022DataDevThermos.  # noqa: E501
        :type: str
        """

        self._thermostat_id = thermostat_id

    @property
    def window_state(self):
        """Gets the window_state of this InlineResponse20022DataDevThermos.  # noqa: E501

        Is the window open or closed  # noqa: E501

        :return: The window_state of this InlineResponse20022DataDevThermos.  # noqa: E501
        :rtype: str
        """
        return self._window_state

    @window_state.setter
    def window_state(self, window_state):
        """Sets the window_state of this InlineResponse20022DataDevThermos.

        Is the window open or closed  # noqa: E501

        :param window_state: The window_state of this InlineResponse20022DataDevThermos.  # noqa: E501
        :type: str
        """
        allowed_values = ["Closed", "Open"]  # noqa: E501
        if window_state not in allowed_values:
            raise ValueError(
                "Invalid value for `window_state` ({0}), must be one of {1}"  # noqa: E501
                .format(window_state, allowed_values)
            )

        self._window_state = window_state

    @property
    def valve_status(self):
        """Gets the valve_status of this InlineResponse20022DataDevThermos.  # noqa: E501

        The state has 3 parts `{valveValue}|{mode}|{valvePercentage}`  **ValveValue**: * ON * OFF  **Mode**: * Cooling * Heating  **ValvePercentage**: * 0-100 * N/A – in case the valve type is ON/OFF  # noqa: E501

        :return: The valve_status of this InlineResponse20022DataDevThermos.  # noqa: E501
        :rtype: str
        """
        return self._valve_status

    @valve_status.setter
    def valve_status(self, valve_status):
        """Sets the valve_status of this InlineResponse20022DataDevThermos.

        The state has 3 parts `{valveValue}|{mode}|{valvePercentage}`  **ValveValue**: * ON * OFF  **Mode**: * Cooling * Heating  **ValvePercentage**: * 0-100 * N/A – in case the valve type is ON/OFF  # noqa: E501

        :param valve_status: The valve_status of this InlineResponse20022DataDevThermos.  # noqa: E501
        :type: str
        """

        self._valve_status = valve_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20022DataDevThermos, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20022DataDevThermos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
