# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GuestsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page': 'int',
        'per_page': 'int',
        'company_id': 'str',
        'company_ids': 'list[str]',
        'first_name_eq': 'str',
        'first_name_cont': 'str',
        'last_name_eq': 'str',
        'last_name_cont': 'str',
        'pms_id': 'str',
        'pms_ids': 'list[str]',
        'ids': 'list[str]'
    }

    attribute_map = {
        'page': 'page',
        'per_page': 'per_page',
        'company_id': 'company_id',
        'company_ids': 'company_ids',
        'first_name_eq': 'first_name_eq',
        'first_name_cont': 'first_name_cont',
        'last_name_eq': 'last_name_eq',
        'last_name_cont': 'last_name_cont',
        'pms_id': 'pms_id',
        'pms_ids': 'pms_ids',
        'ids': 'ids'
    }

    def __init__(self, page=None, per_page=None, company_id=None, company_ids=None, first_name_eq=None, first_name_cont=None, last_name_eq=None, last_name_cont=None, pms_id=None, pms_ids=None, ids=None):  # noqa: E501
        """GuestsBody - a model defined in Swagger"""  # noqa: E501
        self._page = None
        self._per_page = None
        self._company_id = None
        self._company_ids = None
        self._first_name_eq = None
        self._first_name_cont = None
        self._last_name_eq = None
        self._last_name_cont = None
        self._pms_id = None
        self._pms_ids = None
        self._ids = None
        self.discriminator = None
        if page is not None:
            self.page = page
        if per_page is not None:
            self.per_page = per_page
        if company_id is not None:
            self.company_id = company_id
        if company_ids is not None:
            self.company_ids = company_ids
        if first_name_eq is not None:
            self.first_name_eq = first_name_eq
        if first_name_cont is not None:
            self.first_name_cont = first_name_cont
        if last_name_eq is not None:
            self.last_name_eq = last_name_eq
        if last_name_cont is not None:
            self.last_name_cont = last_name_cont
        if pms_id is not None:
            self.pms_id = pms_id
        if pms_ids is not None:
            self.pms_ids = pms_ids
        if ids is not None:
            self.ids = ids

    @property
    def page(self):
        """Gets the page of this GuestsBody.  # noqa: E501

        Required page number in paginated results  # noqa: E501

        :return: The page of this GuestsBody.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this GuestsBody.

        Required page number in paginated results  # noqa: E501

        :param page: The page of this GuestsBody.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this GuestsBody.  # noqa: E501

        Number of results per page  # noqa: E501

        :return: The per_page of this GuestsBody.  # noqa: E501
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this GuestsBody.

        Number of results per page  # noqa: E501

        :param per_page: The per_page of this GuestsBody.  # noqa: E501
        :type: int
        """

        self._per_page = per_page

    @property
    def company_id(self):
        """Gets the company_id of this GuestsBody.  # noqa: E501

        The company ID  # noqa: E501

        :return: The company_id of this GuestsBody.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this GuestsBody.

        The company ID  # noqa: E501

        :param company_id: The company_id of this GuestsBody.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def company_ids(self):
        """Gets the company_ids of this GuestsBody.  # noqa: E501

        The company IDs  # noqa: E501

        :return: The company_ids of this GuestsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._company_ids

    @company_ids.setter
    def company_ids(self, company_ids):
        """Sets the company_ids of this GuestsBody.

        The company IDs  # noqa: E501

        :param company_ids: The company_ids of this GuestsBody.  # noqa: E501
        :type: list[str]
        """

        self._company_ids = company_ids

    @property
    def first_name_eq(self):
        """Gets the first_name_eq of this GuestsBody.  # noqa: E501

        Guest first name equals the specified value  # noqa: E501

        :return: The first_name_eq of this GuestsBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name_eq

    @first_name_eq.setter
    def first_name_eq(self, first_name_eq):
        """Sets the first_name_eq of this GuestsBody.

        Guest first name equals the specified value  # noqa: E501

        :param first_name_eq: The first_name_eq of this GuestsBody.  # noqa: E501
        :type: str
        """

        self._first_name_eq = first_name_eq

    @property
    def first_name_cont(self):
        """Gets the first_name_cont of this GuestsBody.  # noqa: E501

        Guest first name contains the specified value  # noqa: E501

        :return: The first_name_cont of this GuestsBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name_cont

    @first_name_cont.setter
    def first_name_cont(self, first_name_cont):
        """Sets the first_name_cont of this GuestsBody.

        Guest first name contains the specified value  # noqa: E501

        :param first_name_cont: The first_name_cont of this GuestsBody.  # noqa: E501
        :type: str
        """

        self._first_name_cont = first_name_cont

    @property
    def last_name_eq(self):
        """Gets the last_name_eq of this GuestsBody.  # noqa: E501

        Guest last name equals the specified value  # noqa: E501

        :return: The last_name_eq of this GuestsBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name_eq

    @last_name_eq.setter
    def last_name_eq(self, last_name_eq):
        """Sets the last_name_eq of this GuestsBody.

        Guest last name equals the specified value  # noqa: E501

        :param last_name_eq: The last_name_eq of this GuestsBody.  # noqa: E501
        :type: str
        """

        self._last_name_eq = last_name_eq

    @property
    def last_name_cont(self):
        """Gets the last_name_cont of this GuestsBody.  # noqa: E501

        Guest last name contains the specified value  # noqa: E501

        :return: The last_name_cont of this GuestsBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name_cont

    @last_name_cont.setter
    def last_name_cont(self, last_name_cont):
        """Sets the last_name_cont of this GuestsBody.

        Guest last name contains the specified value  # noqa: E501

        :param last_name_cont: The last_name_cont of this GuestsBody.  # noqa: E501
        :type: str
        """

        self._last_name_cont = last_name_cont

    @property
    def pms_id(self):
        """Gets the pms_id of this GuestsBody.  # noqa: E501

        PMS / external ID  # noqa: E501

        :return: The pms_id of this GuestsBody.  # noqa: E501
        :rtype: str
        """
        return self._pms_id

    @pms_id.setter
    def pms_id(self, pms_id):
        """Sets the pms_id of this GuestsBody.

        PMS / external ID  # noqa: E501

        :param pms_id: The pms_id of this GuestsBody.  # noqa: E501
        :type: str
        """

        self._pms_id = pms_id

    @property
    def pms_ids(self):
        """Gets the pms_ids of this GuestsBody.  # noqa: E501

        PMS / external IDs  # noqa: E501

        :return: The pms_ids of this GuestsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._pms_ids

    @pms_ids.setter
    def pms_ids(self, pms_ids):
        """Sets the pms_ids of this GuestsBody.

        PMS / external IDs  # noqa: E501

        :param pms_ids: The pms_ids of this GuestsBody.  # noqa: E501
        :type: list[str]
        """

        self._pms_ids = pms_ids

    @property
    def ids(self):
        """Gets the ids of this GuestsBody.  # noqa: E501

        Guest IDs  # noqa: E501

        :return: The ids of this GuestsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this GuestsBody.

        Guest IDs  # noqa: E501

        :param ids: The ids of this GuestsBody.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GuestsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuestsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
