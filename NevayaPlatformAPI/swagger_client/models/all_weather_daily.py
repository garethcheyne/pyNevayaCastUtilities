# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllWeatherDaily(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dt': 'int',
        'sunrise': 'int',
        'sunset': 'int',
        'temp': 'AllWeatherTemp',
        'feels_like': 'AllWeatherFeelsLike',
        'pressure': 'float',
        'humidity': 'float',
        'dew_point': 'float',
        'wind_speed': 'float',
        'wind_deg': 'float',
        'weather': 'AllWeatherCurrentWeather',
        'clouds': 'float',
        'pop': 'float',
        'uvi': 'float',
        'icon': 'int',
        'rain': 'float',
        'snow': 'float'
    }

    attribute_map = {
        'dt': 'dt',
        'sunrise': 'sunrise',
        'sunset': 'sunset',
        'temp': 'temp',
        'feels_like': 'feels_like',
        'pressure': 'pressure',
        'humidity': 'humidity',
        'dew_point': 'dew_point',
        'wind_speed': 'wind_speed',
        'wind_deg': 'wind_deg',
        'weather': 'weather',
        'clouds': 'clouds',
        'pop': 'pop',
        'uvi': 'uvi',
        'icon': 'icon',
        'rain': 'rain',
        'snow': 'snow'
    }

    def __init__(self, dt=None, sunrise=None, sunset=None, temp=None, feels_like=None, pressure=None, humidity=None, dew_point=None, wind_speed=None, wind_deg=None, weather=None, clouds=None, pop=None, uvi=None, icon=None, rain=None, snow=None):  # noqa: E501
        """AllWeatherDaily - a model defined in Swagger"""  # noqa: E501
        self._dt = None
        self._sunrise = None
        self._sunset = None
        self._temp = None
        self._feels_like = None
        self._pressure = None
        self._humidity = None
        self._dew_point = None
        self._wind_speed = None
        self._wind_deg = None
        self._weather = None
        self._clouds = None
        self._pop = None
        self._uvi = None
        self._icon = None
        self._rain = None
        self._snow = None
        self.discriminator = None
        if dt is not None:
            self.dt = dt
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset
        if temp is not None:
            self.temp = temp
        if feels_like is not None:
            self.feels_like = feels_like
        if pressure is not None:
            self.pressure = pressure
        if humidity is not None:
            self.humidity = humidity
        if dew_point is not None:
            self.dew_point = dew_point
        if wind_speed is not None:
            self.wind_speed = wind_speed
        if wind_deg is not None:
            self.wind_deg = wind_deg
        if weather is not None:
            self.weather = weather
        if clouds is not None:
            self.clouds = clouds
        if pop is not None:
            self.pop = pop
        if uvi is not None:
            self.uvi = uvi
        if icon is not None:
            self.icon = icon
        if rain is not None:
            self.rain = rain
        if snow is not None:
            self.snow = snow

    @property
    def dt(self):
        """Gets the dt of this AllWeatherDaily.  # noqa: E501

        Time of the forecasted data, Unix, UTC  # noqa: E501

        :return: The dt of this AllWeatherDaily.  # noqa: E501
        :rtype: int
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this AllWeatherDaily.

        Time of the forecasted data, Unix, UTC  # noqa: E501

        :param dt: The dt of this AllWeatherDaily.  # noqa: E501
        :type: int
        """

        self._dt = dt

    @property
    def sunrise(self):
        """Gets the sunrise of this AllWeatherDaily.  # noqa: E501

        Sunrise time, Unix, UTC  # noqa: E501

        :return: The sunrise of this AllWeatherDaily.  # noqa: E501
        :rtype: int
        """
        return self._sunrise

    @sunrise.setter
    def sunrise(self, sunrise):
        """Sets the sunrise of this AllWeatherDaily.

        Sunrise time, Unix, UTC  # noqa: E501

        :param sunrise: The sunrise of this AllWeatherDaily.  # noqa: E501
        :type: int
        """

        self._sunrise = sunrise

    @property
    def sunset(self):
        """Gets the sunset of this AllWeatherDaily.  # noqa: E501

        Sunset time, Unix, UTC  # noqa: E501

        :return: The sunset of this AllWeatherDaily.  # noqa: E501
        :rtype: int
        """
        return self._sunset

    @sunset.setter
    def sunset(self, sunset):
        """Sets the sunset of this AllWeatherDaily.

        Sunset time, Unix, UTC  # noqa: E501

        :param sunset: The sunset of this AllWeatherDaily.  # noqa: E501
        :type: int
        """

        self._sunset = sunset

    @property
    def temp(self):
        """Gets the temp of this AllWeatherDaily.  # noqa: E501


        :return: The temp of this AllWeatherDaily.  # noqa: E501
        :rtype: AllWeatherTemp
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this AllWeatherDaily.


        :param temp: The temp of this AllWeatherDaily.  # noqa: E501
        :type: AllWeatherTemp
        """

        self._temp = temp

    @property
    def feels_like(self):
        """Gets the feels_like of this AllWeatherDaily.  # noqa: E501


        :return: The feels_like of this AllWeatherDaily.  # noqa: E501
        :rtype: AllWeatherFeelsLike
        """
        return self._feels_like

    @feels_like.setter
    def feels_like(self, feels_like):
        """Sets the feels_like of this AllWeatherDaily.


        :param feels_like: The feels_like of this AllWeatherDaily.  # noqa: E501
        :type: AllWeatherFeelsLike
        """

        self._feels_like = feels_like

    @property
    def pressure(self):
        """Gets the pressure of this AllWeatherDaily.  # noqa: E501

        Atmospheric pressure on the sea level, hPa  # noqa: E501

        :return: The pressure of this AllWeatherDaily.  # noqa: E501
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this AllWeatherDaily.

        Atmospheric pressure on the sea level, hPa  # noqa: E501

        :param pressure: The pressure of this AllWeatherDaily.  # noqa: E501
        :type: float
        """

        self._pressure = pressure

    @property
    def humidity(self):
        """Gets the humidity of this AllWeatherDaily.  # noqa: E501

        Humidity, %  # noqa: E501

        :return: The humidity of this AllWeatherDaily.  # noqa: E501
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this AllWeatherDaily.

        Humidity, %  # noqa: E501

        :param humidity: The humidity of this AllWeatherDaily.  # noqa: E501
        :type: float
        """

        self._humidity = humidity

    @property
    def dew_point(self):
        """Gets the dew_point of this AllWeatherDaily.  # noqa: E501

        Atmospheric temperature (varying according to pressure and humidity) below which water droplets begin to condense and dew can form, in Kelvin  # noqa: E501

        :return: The dew_point of this AllWeatherDaily.  # noqa: E501
        :rtype: float
        """
        return self._dew_point

    @dew_point.setter
    def dew_point(self, dew_point):
        """Sets the dew_point of this AllWeatherDaily.

        Atmospheric temperature (varying according to pressure and humidity) below which water droplets begin to condense and dew can form, in Kelvin  # noqa: E501

        :param dew_point: The dew_point of this AllWeatherDaily.  # noqa: E501
        :type: float
        """

        self._dew_point = dew_point

    @property
    def wind_speed(self):
        """Gets the wind_speed of this AllWeatherDaily.  # noqa: E501

        Wind speed, in m/s  # noqa: E501

        :return: The wind_speed of this AllWeatherDaily.  # noqa: E501
        :rtype: float
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this AllWeatherDaily.

        Wind speed, in m/s  # noqa: E501

        :param wind_speed: The wind_speed of this AllWeatherDaily.  # noqa: E501
        :type: float
        """

        self._wind_speed = wind_speed

    @property
    def wind_deg(self):
        """Gets the wind_deg of this AllWeatherDaily.  # noqa: E501

        Wind direction, in degrees (meteorological)  # noqa: E501

        :return: The wind_deg of this AllWeatherDaily.  # noqa: E501
        :rtype: float
        """
        return self._wind_deg

    @wind_deg.setter
    def wind_deg(self, wind_deg):
        """Sets the wind_deg of this AllWeatherDaily.

        Wind direction, in degrees (meteorological)  # noqa: E501

        :param wind_deg: The wind_deg of this AllWeatherDaily.  # noqa: E501
        :type: float
        """

        self._wind_deg = wind_deg

    @property
    def weather(self):
        """Gets the weather of this AllWeatherDaily.  # noqa: E501


        :return: The weather of this AllWeatherDaily.  # noqa: E501
        :rtype: AllWeatherCurrentWeather
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this AllWeatherDaily.


        :param weather: The weather of this AllWeatherDaily.  # noqa: E501
        :type: AllWeatherCurrentWeather
        """

        self._weather = weather

    @property
    def clouds(self):
        """Gets the clouds of this AllWeatherDaily.  # noqa: E501

        Cloudiness, %  # noqa: E501

        :return: The clouds of this AllWeatherDaily.  # noqa: E501
        :rtype: float
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this AllWeatherDaily.

        Cloudiness, %  # noqa: E501

        :param clouds: The clouds of this AllWeatherDaily.  # noqa: E501
        :type: float
        """

        self._clouds = clouds

    @property
    def pop(self):
        """Gets the pop of this AllWeatherDaily.  # noqa: E501

        Probability of precipitation  # noqa: E501

        :return: The pop of this AllWeatherDaily.  # noqa: E501
        :rtype: float
        """
        return self._pop

    @pop.setter
    def pop(self, pop):
        """Sets the pop of this AllWeatherDaily.

        Probability of precipitation  # noqa: E501

        :param pop: The pop of this AllWeatherDaily.  # noqa: E501
        :type: float
        """

        self._pop = pop

    @property
    def uvi(self):
        """Gets the uvi of this AllWeatherDaily.  # noqa: E501

        Midday UV index  # noqa: E501

        :return: The uvi of this AllWeatherDaily.  # noqa: E501
        :rtype: float
        """
        return self._uvi

    @uvi.setter
    def uvi(self, uvi):
        """Sets the uvi of this AllWeatherDaily.

        Midday UV index  # noqa: E501

        :param uvi: The uvi of this AllWeatherDaily.  # noqa: E501
        :type: float
        """

        self._uvi = uvi

    @property
    def icon(self):
        """Gets the icon of this AllWeatherDaily.  # noqa: E501

        Internal  # noqa: E501

        :return: The icon of this AllWeatherDaily.  # noqa: E501
        :rtype: int
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this AllWeatherDaily.

        Internal  # noqa: E501

        :param icon: The icon of this AllWeatherDaily.  # noqa: E501
        :type: int
        """

        self._icon = icon

    @property
    def rain(self):
        """Gets the rain of this AllWeatherDaily.  # noqa: E501

        Rain volume, in mm  # noqa: E501

        :return: The rain of this AllWeatherDaily.  # noqa: E501
        :rtype: float
        """
        return self._rain

    @rain.setter
    def rain(self, rain):
        """Sets the rain of this AllWeatherDaily.

        Rain volume, in mm  # noqa: E501

        :param rain: The rain of this AllWeatherDaily.  # noqa: E501
        :type: float
        """

        self._rain = rain

    @property
    def snow(self):
        """Gets the snow of this AllWeatherDaily.  # noqa: E501

        Snow volume, in mm  # noqa: E501

        :return: The snow of this AllWeatherDaily.  # noqa: E501
        :rtype: float
        """
        return self._snow

    @snow.setter
    def snow(self, snow):
        """Sets the snow of this AllWeatherDaily.

        Snow volume, in mm  # noqa: E501

        :param snow: The snow of this AllWeatherDaily.  # noqa: E501
        :type: float
        """

        self._snow = snow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllWeatherDaily, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllWeatherDaily):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
