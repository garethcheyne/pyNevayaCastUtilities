# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChromecastsPairingcodesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chromecast_ids': 'list[str]',
        'colour': 'str',
        'fill': 'str',
        'size': 'int',
        'qr': 'OneOfchromecastsPairingcodesBodyQr'
    }

    attribute_map = {
        'chromecast_ids': 'chromecast_ids',
        'colour': 'colour',
        'fill': 'fill',
        'size': 'size',
        'qr': 'qr'
    }

    def __init__(self, chromecast_ids=None, colour='#000', fill='#fff', size=200, qr=None):  # noqa: E501
        """ChromecastsPairingcodesBody - a model defined in Swagger"""  # noqa: E501
        self._chromecast_ids = None
        self._colour = None
        self._fill = None
        self._size = None
        self._qr = None
        self.discriminator = None
        self.chromecast_ids = chromecast_ids
        if colour is not None:
            self.colour = colour
        if fill is not None:
            self.fill = fill
        if size is not None:
            self.size = size
        if qr is not None:
            self.qr = qr

    @property
    def chromecast_ids(self):
        """Gets the chromecast_ids of this ChromecastsPairingcodesBody.  # noqa: E501

        An array of chromecast IDs  # noqa: E501

        :return: The chromecast_ids of this ChromecastsPairingcodesBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._chromecast_ids

    @chromecast_ids.setter
    def chromecast_ids(self, chromecast_ids):
        """Sets the chromecast_ids of this ChromecastsPairingcodesBody.

        An array of chromecast IDs  # noqa: E501

        :param chromecast_ids: The chromecast_ids of this ChromecastsPairingcodesBody.  # noqa: E501
        :type: list[str]
        """
        if chromecast_ids is None:
            raise ValueError("Invalid value for `chromecast_ids`, must not be `None`")  # noqa: E501

        self._chromecast_ids = chromecast_ids

    @property
    def colour(self):
        """Gets the colour of this ChromecastsPairingcodesBody.  # noqa: E501

        The foreground colour of the QR code in HEX format  # noqa: E501

        :return: The colour of this ChromecastsPairingcodesBody.  # noqa: E501
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this ChromecastsPairingcodesBody.

        The foreground colour of the QR code in HEX format  # noqa: E501

        :param colour: The colour of this ChromecastsPairingcodesBody.  # noqa: E501
        :type: str
        """

        self._colour = colour

    @property
    def fill(self):
        """Gets the fill of this ChromecastsPairingcodesBody.  # noqa: E501

        The background colour of the QR code in HEX format  # noqa: E501

        :return: The fill of this ChromecastsPairingcodesBody.  # noqa: E501
        :rtype: str
        """
        return self._fill

    @fill.setter
    def fill(self, fill):
        """Sets the fill of this ChromecastsPairingcodesBody.

        The background colour of the QR code in HEX format  # noqa: E501

        :param fill: The fill of this ChromecastsPairingcodesBody.  # noqa: E501
        :type: str
        """

        self._fill = fill

    @property
    def size(self):
        """Gets the size of this ChromecastsPairingcodesBody.  # noqa: E501

        Size of the image in px, always returns a square image  # noqa: E501

        :return: The size of this ChromecastsPairingcodesBody.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ChromecastsPairingcodesBody.

        Size of the image in px, always returns a square image  # noqa: E501

        :param size: The size of this ChromecastsPairingcodesBody.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def qr(self):
        """Gets the qr of this ChromecastsPairingcodesBody.  # noqa: E501

        Include the matching QR code image. If set to a string the string should be a URL. The QR code will point to `<url>?token=<token>`  # noqa: E501

        :return: The qr of this ChromecastsPairingcodesBody.  # noqa: E501
        :rtype: OneOfchromecastsPairingcodesBodyQr
        """
        return self._qr

    @qr.setter
    def qr(self, qr):
        """Sets the qr of this ChromecastsPairingcodesBody.

        Include the matching QR code image. If set to a string the string should be a URL. The QR code will point to `<url>?token=<token>`  # noqa: E501

        :param qr: The qr of this ChromecastsPairingcodesBody.  # noqa: E501
        :type: OneOfchromecastsPairingcodesBodyQr
        """

        self._qr = qr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChromecastsPairingcodesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChromecastsPairingcodesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
