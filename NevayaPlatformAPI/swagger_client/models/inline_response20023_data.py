# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20023Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_control_provider': 'str',
        'interel': 'Interel'
    }

    attribute_map = {
        'room_control_provider': 'room_control_provider',
        'interel': 'interel'
    }

    def __init__(self, room_control_provider=None, interel=None):  # noqa: E501
        """InlineResponse20023Data - a model defined in Swagger"""  # noqa: E501
        self._room_control_provider = None
        self._interel = None
        self.discriminator = None
        if room_control_provider is not None:
            self.room_control_provider = room_control_provider
        if interel is not None:
            self.interel = interel

    @property
    def room_control_provider(self):
        """Gets the room_control_provider of this InlineResponse20023Data.  # noqa: E501

        The room control provider, if there is one  # noqa: E501

        :return: The room_control_provider of this InlineResponse20023Data.  # noqa: E501
        :rtype: str
        """
        return self._room_control_provider

    @room_control_provider.setter
    def room_control_provider(self, room_control_provider):
        """Sets the room_control_provider of this InlineResponse20023Data.

        The room control provider, if there is one  # noqa: E501

        :param room_control_provider: The room_control_provider of this InlineResponse20023Data.  # noqa: E501
        :type: str
        """
        allowed_values = ["interel", "dummy"]  # noqa: E501
        if room_control_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `room_control_provider` ({0}), must be one of {1}"  # noqa: E501
                .format(room_control_provider, allowed_values)
            )

        self._room_control_provider = room_control_provider

    @property
    def interel(self):
        """Gets the interel of this InlineResponse20023Data.  # noqa: E501


        :return: The interel of this InlineResponse20023Data.  # noqa: E501
        :rtype: Interel
        """
        return self._interel

    @interel.setter
    def interel(self, interel):
        """Sets the interel of this InlineResponse20023Data.


        :param interel: The interel of this InlineResponse20023Data.  # noqa: E501
        :type: Interel
        """

        self._interel = interel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20023Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20023Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
