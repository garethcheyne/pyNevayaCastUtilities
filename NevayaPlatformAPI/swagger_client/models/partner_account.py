# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartnerAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'contacts': 'list[Contact]',
        'topic_arn': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'contacts': 'contacts',
        'topic_arn': 'topic_arn'
    }

    def __init__(self, id=None, name=None, created_at=None, updated_at=None, contacts=None, topic_arn=None):  # noqa: E501
        """PartnerAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._created_at = None
        self._updated_at = None
        self._contacts = None
        self._topic_arn = None
        self.discriminator = None
        self.id = id
        self.name = name
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if contacts is not None:
            self.contacts = contacts
        if topic_arn is not None:
            self.topic_arn = topic_arn

    @property
    def id(self):
        """Gets the id of this PartnerAccount.  # noqa: E501


        :return: The id of this PartnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartnerAccount.


        :param id: The id of this PartnerAccount.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this PartnerAccount.  # noqa: E501


        :return: The name of this PartnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PartnerAccount.


        :param name: The name of this PartnerAccount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this PartnerAccount.  # noqa: E501


        :return: The created_at of this PartnerAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PartnerAccount.


        :param created_at: The created_at of this PartnerAccount.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PartnerAccount.  # noqa: E501


        :return: The updated_at of this PartnerAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PartnerAccount.


        :param updated_at: The updated_at of this PartnerAccount.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def contacts(self):
        """Gets the contacts of this PartnerAccount.  # noqa: E501


        :return: The contacts of this PartnerAccount.  # noqa: E501
        :rtype: list[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this PartnerAccount.


        :param contacts: The contacts of this PartnerAccount.  # noqa: E501
        :type: list[Contact]
        """

        self._contacts = contacts

    @property
    def topic_arn(self):
        """Gets the topic_arn of this PartnerAccount.  # noqa: E501


        :return: The topic_arn of this PartnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this PartnerAccount.


        :param topic_arn: The topic_arn of this PartnerAccount.  # noqa: E501
        :type: str
        """

        self._topic_arn = topic_arn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartnerAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartnerAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
