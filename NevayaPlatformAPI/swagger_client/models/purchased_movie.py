# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PurchasedMovie(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'movie_id': 'str',
        'valid_to': 'datetime'
    }

    attribute_map = {
        'movie_id': 'movie_id',
        'valid_to': 'valid_to'
    }

    def __init__(self, movie_id=None, valid_to=None):  # noqa: E501
        """PurchasedMovie - a model defined in Swagger"""  # noqa: E501
        self._movie_id = None
        self._valid_to = None
        self.discriminator = None
        if movie_id is not None:
            self.movie_id = movie_id
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def movie_id(self):
        """Gets the movie_id of this PurchasedMovie.  # noqa: E501


        :return: The movie_id of this PurchasedMovie.  # noqa: E501
        :rtype: str
        """
        return self._movie_id

    @movie_id.setter
    def movie_id(self, movie_id):
        """Sets the movie_id of this PurchasedMovie.


        :param movie_id: The movie_id of this PurchasedMovie.  # noqa: E501
        :type: str
        """

        self._movie_id = movie_id

    @property
    def valid_to(self):
        """Gets the valid_to of this PurchasedMovie.  # noqa: E501


        :return: The valid_to of this PurchasedMovie.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this PurchasedMovie.


        :param valid_to: The valid_to of this PurchasedMovie.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchasedMovie, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchasedMovie):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
