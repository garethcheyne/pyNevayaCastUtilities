# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20031Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'ownable_type': 'str',
        'ownable_id': 'str',
        'statuses': 'list[InlineResponse20031Statuses]',
        'group': 'InlineResponse20030Items',
        'item': 'InlineResponse20030Items',
        'room_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'ownable_type': 'ownable_type',
        'ownable_id': 'ownable_id',
        'statuses': 'statuses',
        'group': 'group',
        'item': 'item',
        'room_id': 'room_id'
    }

    def __init__(self, id=None, status=None, created_at=None, updated_at=None, ownable_type=None, ownable_id=None, statuses=None, group=None, item=None, room_id=None):  # noqa: E501
        """InlineResponse20031Data - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._created_at = None
        self._updated_at = None
        self._ownable_type = None
        self._ownable_id = None
        self._statuses = None
        self._group = None
        self._item = None
        self._room_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if ownable_type is not None:
            self.ownable_type = ownable_type
        if ownable_id is not None:
            self.ownable_id = ownable_id
        if statuses is not None:
            self.statuses = statuses
        if group is not None:
            self.group = group
        if item is not None:
            self.item = item
        if room_id is not None:
            self.room_id = room_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20031Data.  # noqa: E501


        :return: The id of this InlineResponse20031Data.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20031Data.


        :param id: The id of this InlineResponse20031Data.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this InlineResponse20031Data.  # noqa: E501


        :return: The status of this InlineResponse20031Data.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20031Data.


        :param status: The status of this InlineResponse20031Data.  # noqa: E501
        :type: str
        """
        allowed_values = ["cancelled", "complete", "error", "in_progress", "submitted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20031Data.  # noqa: E501


        :return: The created_at of this InlineResponse20031Data.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20031Data.


        :param created_at: The created_at of this InlineResponse20031Data.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse20031Data.  # noqa: E501


        :return: The updated_at of this InlineResponse20031Data.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse20031Data.


        :param updated_at: The updated_at of this InlineResponse20031Data.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def ownable_type(self):
        """Gets the ownable_type of this InlineResponse20031Data.  # noqa: E501


        :return: The ownable_type of this InlineResponse20031Data.  # noqa: E501
        :rtype: str
        """
        return self._ownable_type

    @ownable_type.setter
    def ownable_type(self, ownable_type):
        """Sets the ownable_type of this InlineResponse20031Data.


        :param ownable_type: The ownable_type of this InlineResponse20031Data.  # noqa: E501
        :type: str
        """

        self._ownable_type = ownable_type

    @property
    def ownable_id(self):
        """Gets the ownable_id of this InlineResponse20031Data.  # noqa: E501


        :return: The ownable_id of this InlineResponse20031Data.  # noqa: E501
        :rtype: str
        """
        return self._ownable_id

    @ownable_id.setter
    def ownable_id(self, ownable_id):
        """Sets the ownable_id of this InlineResponse20031Data.


        :param ownable_id: The ownable_id of this InlineResponse20031Data.  # noqa: E501
        :type: str
        """

        self._ownable_id = ownable_id

    @property
    def statuses(self):
        """Gets the statuses of this InlineResponse20031Data.  # noqa: E501


        :return: The statuses of this InlineResponse20031Data.  # noqa: E501
        :rtype: list[InlineResponse20031Statuses]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this InlineResponse20031Data.


        :param statuses: The statuses of this InlineResponse20031Data.  # noqa: E501
        :type: list[InlineResponse20031Statuses]
        """

        self._statuses = statuses

    @property
    def group(self):
        """Gets the group of this InlineResponse20031Data.  # noqa: E501


        :return: The group of this InlineResponse20031Data.  # noqa: E501
        :rtype: InlineResponse20030Items
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this InlineResponse20031Data.


        :param group: The group of this InlineResponse20031Data.  # noqa: E501
        :type: InlineResponse20030Items
        """

        self._group = group

    @property
    def item(self):
        """Gets the item of this InlineResponse20031Data.  # noqa: E501


        :return: The item of this InlineResponse20031Data.  # noqa: E501
        :rtype: InlineResponse20030Items
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this InlineResponse20031Data.


        :param item: The item of this InlineResponse20031Data.  # noqa: E501
        :type: InlineResponse20030Items
        """

        self._item = item

    @property
    def room_id(self):
        """Gets the room_id of this InlineResponse20031Data.  # noqa: E501


        :return: The room_id of this InlineResponse20031Data.  # noqa: E501
        :rtype: str
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this InlineResponse20031Data.


        :param room_id: The room_id of this InlineResponse20031Data.  # noqa: E501
        :type: str
        """

        self._room_id = room_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20031Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20031Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
