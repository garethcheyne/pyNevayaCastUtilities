# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrentWeather(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sunrise': 'int',
        'sunset': 'int',
        'icon': 'str',
        'weather': 'AllWeatherCurrentWeather',
        'main': 'CurrentWeatherMain',
        'wind': 'CurrentWeatherWind',
        'clouds': 'float',
        'updated': 'float',
        'rain': 'float',
        'snow': 'float',
        'timezone': 'int'
    }

    attribute_map = {
        'sunrise': 'sunrise',
        'sunset': 'sunset',
        'icon': 'icon',
        'weather': 'weather',
        'main': 'main',
        'wind': 'wind',
        'clouds': 'clouds',
        'updated': 'updated',
        'rain': 'rain',
        'snow': 'snow',
        'timezone': 'timezone'
    }

    def __init__(self, sunrise=None, sunset=None, icon=None, weather=None, main=None, wind=None, clouds=None, updated=None, rain=None, snow=None, timezone=None):  # noqa: E501
        """CurrentWeather - a model defined in Swagger"""  # noqa: E501
        self._sunrise = None
        self._sunset = None
        self._icon = None
        self._weather = None
        self._main = None
        self._wind = None
        self._clouds = None
        self._updated = None
        self._rain = None
        self._snow = None
        self._timezone = None
        self.discriminator = None
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset
        if icon is not None:
            self.icon = icon
        if weather is not None:
            self.weather = weather
        if main is not None:
            self.main = main
        if wind is not None:
            self.wind = wind
        if clouds is not None:
            self.clouds = clouds
        if updated is not None:
            self.updated = updated
        if rain is not None:
            self.rain = rain
        if snow is not None:
            self.snow = snow
        if timezone is not None:
            self.timezone = timezone

    @property
    def sunrise(self):
        """Gets the sunrise of this CurrentWeather.  # noqa: E501

        Sunrise time, unix, UTC  # noqa: E501

        :return: The sunrise of this CurrentWeather.  # noqa: E501
        :rtype: int
        """
        return self._sunrise

    @sunrise.setter
    def sunrise(self, sunrise):
        """Sets the sunrise of this CurrentWeather.

        Sunrise time, unix, UTC  # noqa: E501

        :param sunrise: The sunrise of this CurrentWeather.  # noqa: E501
        :type: int
        """

        self._sunrise = sunrise

    @property
    def sunset(self):
        """Gets the sunset of this CurrentWeather.  # noqa: E501

        Sunset time, unix, UTC  # noqa: E501

        :return: The sunset of this CurrentWeather.  # noqa: E501
        :rtype: int
        """
        return self._sunset

    @sunset.setter
    def sunset(self, sunset):
        """Sets the sunset of this CurrentWeather.

        Sunset time, unix, UTC  # noqa: E501

        :param sunset: The sunset of this CurrentWeather.  # noqa: E501
        :type: int
        """

        self._sunset = sunset

    @property
    def icon(self):
        """Gets the icon of this CurrentWeather.  # noqa: E501

        Internal  # noqa: E501

        :return: The icon of this CurrentWeather.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this CurrentWeather.

        Internal  # noqa: E501

        :param icon: The icon of this CurrentWeather.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def weather(self):
        """Gets the weather of this CurrentWeather.  # noqa: E501


        :return: The weather of this CurrentWeather.  # noqa: E501
        :rtype: AllWeatherCurrentWeather
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this CurrentWeather.


        :param weather: The weather of this CurrentWeather.  # noqa: E501
        :type: AllWeatherCurrentWeather
        """

        self._weather = weather

    @property
    def main(self):
        """Gets the main of this CurrentWeather.  # noqa: E501


        :return: The main of this CurrentWeather.  # noqa: E501
        :rtype: CurrentWeatherMain
        """
        return self._main

    @main.setter
    def main(self, main):
        """Sets the main of this CurrentWeather.


        :param main: The main of this CurrentWeather.  # noqa: E501
        :type: CurrentWeatherMain
        """

        self._main = main

    @property
    def wind(self):
        """Gets the wind of this CurrentWeather.  # noqa: E501


        :return: The wind of this CurrentWeather.  # noqa: E501
        :rtype: CurrentWeatherWind
        """
        return self._wind

    @wind.setter
    def wind(self, wind):
        """Sets the wind of this CurrentWeather.


        :param wind: The wind of this CurrentWeather.  # noqa: E501
        :type: CurrentWeatherWind
        """

        self._wind = wind

    @property
    def clouds(self):
        """Gets the clouds of this CurrentWeather.  # noqa: E501

        Cloudiness, %  # noqa: E501

        :return: The clouds of this CurrentWeather.  # noqa: E501
        :rtype: float
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this CurrentWeather.

        Cloudiness, %  # noqa: E501

        :param clouds: The clouds of this CurrentWeather.  # noqa: E501
        :type: float
        """

        self._clouds = clouds

    @property
    def updated(self):
        """Gets the updated of this CurrentWeather.  # noqa: E501


        :return: The updated of this CurrentWeather.  # noqa: E501
        :rtype: float
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this CurrentWeather.


        :param updated: The updated of this CurrentWeather.  # noqa: E501
        :type: float
        """

        self._updated = updated

    @property
    def rain(self):
        """Gets the rain of this CurrentWeather.  # noqa: E501

        Rain volume, in mm  # noqa: E501

        :return: The rain of this CurrentWeather.  # noqa: E501
        :rtype: float
        """
        return self._rain

    @rain.setter
    def rain(self, rain):
        """Sets the rain of this CurrentWeather.

        Rain volume, in mm  # noqa: E501

        :param rain: The rain of this CurrentWeather.  # noqa: E501
        :type: float
        """

        self._rain = rain

    @property
    def snow(self):
        """Gets the snow of this CurrentWeather.  # noqa: E501

        Snow volume, in mm  # noqa: E501

        :return: The snow of this CurrentWeather.  # noqa: E501
        :rtype: float
        """
        return self._snow

    @snow.setter
    def snow(self, snow):
        """Sets the snow of this CurrentWeather.

        Snow volume, in mm  # noqa: E501

        :param snow: The snow of this CurrentWeather.  # noqa: E501
        :type: float
        """

        self._snow = snow

    @property
    def timezone(self):
        """Gets the timezone of this CurrentWeather.  # noqa: E501

        Shift in seconds from UTC  # noqa: E501

        :return: The timezone of this CurrentWeather.  # noqa: E501
        :rtype: int
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CurrentWeather.

        Shift in seconds from UTC  # noqa: E501

        :param timezone: The timezone of this CurrentWeather.  # noqa: E501
        :type: int
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentWeather, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentWeather):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
