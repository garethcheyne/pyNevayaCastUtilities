# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20022Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dev_thermos': 'list[InlineResponse20022DataDevThermos]',
        'dnd': 'bool',
        'mur': 'bool',
        'presence': 'bool'
    }

    attribute_map = {
        'dev_thermos': 'DevThermos',
        'dnd': 'Dnd',
        'mur': 'Mur',
        'presence': 'Presence'
    }

    def __init__(self, dev_thermos=None, dnd=None, mur=None, presence=None):  # noqa: E501
        """InlineResponse20022Data - a model defined in Swagger"""  # noqa: E501
        self._dev_thermos = None
        self._dnd = None
        self._mur = None
        self._presence = None
        self.discriminator = None
        if dev_thermos is not None:
            self.dev_thermos = dev_thermos
        if dnd is not None:
            self.dnd = dnd
        if mur is not None:
            self.mur = mur
        if presence is not None:
            self.presence = presence

    @property
    def dev_thermos(self):
        """Gets the dev_thermos of this InlineResponse20022Data.  # noqa: E501


        :return: The dev_thermos of this InlineResponse20022Data.  # noqa: E501
        :rtype: list[InlineResponse20022DataDevThermos]
        """
        return self._dev_thermos

    @dev_thermos.setter
    def dev_thermos(self, dev_thermos):
        """Sets the dev_thermos of this InlineResponse20022Data.


        :param dev_thermos: The dev_thermos of this InlineResponse20022Data.  # noqa: E501
        :type: list[InlineResponse20022DataDevThermos]
        """

        self._dev_thermos = dev_thermos

    @property
    def dnd(self):
        """Gets the dnd of this InlineResponse20022Data.  # noqa: E501

        Do not disturb  # noqa: E501

        :return: The dnd of this InlineResponse20022Data.  # noqa: E501
        :rtype: bool
        """
        return self._dnd

    @dnd.setter
    def dnd(self, dnd):
        """Sets the dnd of this InlineResponse20022Data.

        Do not disturb  # noqa: E501

        :param dnd: The dnd of this InlineResponse20022Data.  # noqa: E501
        :type: bool
        """

        self._dnd = dnd

    @property
    def mur(self):
        """Gets the mur of this InlineResponse20022Data.  # noqa: E501

        Make up room  # noqa: E501

        :return: The mur of this InlineResponse20022Data.  # noqa: E501
        :rtype: bool
        """
        return self._mur

    @mur.setter
    def mur(self, mur):
        """Sets the mur of this InlineResponse20022Data.

        Make up room  # noqa: E501

        :param mur: The mur of this InlineResponse20022Data.  # noqa: E501
        :type: bool
        """

        self._mur = mur

    @property
    def presence(self):
        """Gets the presence of this InlineResponse20022Data.  # noqa: E501

        Guest present in the room  # noqa: E501

        :return: The presence of this InlineResponse20022Data.  # noqa: E501
        :rtype: bool
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this InlineResponse20022Data.

        Guest present in the room  # noqa: E501

        :param presence: The presence of this InlineResponse20022Data.  # noqa: E501
        :type: bool
        """

        self._presence = presence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20022Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20022Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
