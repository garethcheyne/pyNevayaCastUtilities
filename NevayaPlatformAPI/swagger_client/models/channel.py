# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Channel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'hd': 'bool',
        'description': 'str',
        'logo': 'str',
        'audio_only': 'bool',
        'category_ids': 'list[str]',
        'epg_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'hd': 'hd',
        'description': 'description',
        'logo': 'logo',
        'audio_only': 'audio_only',
        'category_ids': 'category_ids',
        'epg_id': 'epg_id'
    }

    def __init__(self, id=None, name=None, hd=None, description=None, logo=None, audio_only=None, category_ids=None, epg_id=None):  # noqa: E501
        """Channel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._hd = None
        self._description = None
        self._logo = None
        self._audio_only = None
        self._category_ids = None
        self._epg_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if hd is not None:
            self.hd = hd
        if description is not None:
            self.description = description
        if logo is not None:
            self.logo = logo
        if audio_only is not None:
            self.audio_only = audio_only
        if category_ids is not None:
            self.category_ids = category_ids
        if epg_id is not None:
            self.epg_id = epg_id

    @property
    def id(self):
        """Gets the id of this Channel.  # noqa: E501


        :return: The id of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.


        :param id: The id of this Channel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Channel.  # noqa: E501


        :return: The name of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Channel.


        :param name: The name of this Channel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def hd(self):
        """Gets the hd of this Channel.  # noqa: E501


        :return: The hd of this Channel.  # noqa: E501
        :rtype: bool
        """
        return self._hd

    @hd.setter
    def hd(self, hd):
        """Sets the hd of this Channel.


        :param hd: The hd of this Channel.  # noqa: E501
        :type: bool
        """

        self._hd = hd

    @property
    def description(self):
        """Gets the description of this Channel.  # noqa: E501


        :return: The description of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Channel.


        :param description: The description of this Channel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def logo(self):
        """Gets the logo of this Channel.  # noqa: E501

        Link to the channel logo, fixed size of 160pm x 160px  # noqa: E501

        :return: The logo of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Channel.

        Link to the channel logo, fixed size of 160pm x 160px  # noqa: E501

        :param logo: The logo of this Channel.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def audio_only(self):
        """Gets the audio_only of this Channel.  # noqa: E501

        Channel only has audio and no video, a radio channel for example  # noqa: E501

        :return: The audio_only of this Channel.  # noqa: E501
        :rtype: bool
        """
        return self._audio_only

    @audio_only.setter
    def audio_only(self, audio_only):
        """Sets the audio_only of this Channel.

        Channel only has audio and no video, a radio channel for example  # noqa: E501

        :param audio_only: The audio_only of this Channel.  # noqa: E501
        :type: bool
        """

        self._audio_only = audio_only

    @property
    def category_ids(self):
        """Gets the category_ids of this Channel.  # noqa: E501

        The IDs of the categories the channel is associated with  # noqa: E501

        :return: The category_ids of this Channel.  # noqa: E501
        :rtype: list[str]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this Channel.

        The IDs of the categories the channel is associated with  # noqa: E501

        :param category_ids: The category_ids of this Channel.  # noqa: E501
        :type: list[str]
        """

        self._category_ids = category_ids

    @property
    def epg_id(self):
        """Gets the epg_id of this Channel.  # noqa: E501

        ID to use when retrieving EPG information for the channel  # noqa: E501

        :return: The epg_id of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._epg_id

    @epg_id.setter
    def epg_id(self, epg_id):
        """Sets the epg_id of this Channel.

        ID to use when retrieving EPG information for the channel  # noqa: E501

        :param epg_id: The epg_id of this Channel.  # noqa: E501
        :type: str
        """

        self._epg_id = epg_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Channel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Channel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
