# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReceiverStatePlayer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'str',
        'state': 'str',
        'id': 'OneOfReceiverStatePlayerId',
        'name': 'str',
        'position': 'int'
    }

    attribute_map = {
        'mode': 'mode',
        'state': 'state',
        'id': 'id',
        'name': 'name',
        'position': 'position'
    }

    def __init__(self, mode=None, state=None, id=None, name=None, position=None):  # noqa: E501
        """ReceiverStatePlayer - a model defined in Swagger"""  # noqa: E501
        self._mode = None
        self._state = None
        self._id = None
        self._name = None
        self._position = None
        self.discriminator = None
        if mode is not None:
            self.mode = mode
        if state is not None:
            self.state = state
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if position is not None:
            self.position = position

    @property
    def mode(self):
        """Gets the mode of this ReceiverStatePlayer.  # noqa: E501


        :return: The mode of this ReceiverStatePlayer.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ReceiverStatePlayer.


        :param mode: The mode of this ReceiverStatePlayer.  # noqa: E501
        :type: str
        """
        allowed_values = ["tv", "external", "movie", "site_video", "application"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def state(self):
        """Gets the state of this ReceiverStatePlayer.  # noqa: E501

        Only available when mode is 'movie'  # noqa: E501

        :return: The state of this ReceiverStatePlayer.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReceiverStatePlayer.

        Only available when mode is 'movie'  # noqa: E501

        :param state: The state of this ReceiverStatePlayer.  # noqa: E501
        :type: str
        """
        allowed_values = ["starting", "stopping", "playing", "paused", "seeking"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def id(self):
        """Gets the id of this ReceiverStatePlayer.  # noqa: E501

        ID of the current playing item, i.e the channel ID, the external source etc  # noqa: E501

        :return: The id of this ReceiverStatePlayer.  # noqa: E501
        :rtype: OneOfReceiverStatePlayerId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReceiverStatePlayer.

        ID of the current playing item, i.e the channel ID, the external source etc  # noqa: E501

        :param id: The id of this ReceiverStatePlayer.  # noqa: E501
        :type: OneOfReceiverStatePlayerId
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReceiverStatePlayer.  # noqa: E501

        The name of the current playing item, e.g. for a channel then `BBC One` could be returned, for an external source `Playstation` etc  # noqa: E501

        :return: The name of this ReceiverStatePlayer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReceiverStatePlayer.

        The name of the current playing item, e.g. for a channel then `BBC One` could be returned, for an external source `Playstation` etc  # noqa: E501

        :param name: The name of this ReceiverStatePlayer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this ReceiverStatePlayer.  # noqa: E501

        Only available when mode is 'movie'  # noqa: E501

        :return: The position of this ReceiverStatePlayer.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ReceiverStatePlayer.

        Only available when mode is 'movie'  # noqa: E501

        :param position: The position of this ReceiverStatePlayer.  # noqa: E501
        :type: int
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceiverStatePlayer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceiverStatePlayer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
