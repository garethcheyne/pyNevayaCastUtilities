# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20013Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'qr': 'str',
        'code': 'str',
        'token': 'str',
        'expires': 'int'
    }

    attribute_map = {
        'id': 'id',
        'qr': 'qr',
        'code': 'code',
        'token': 'token',
        'expires': 'expires'
    }

    def __init__(self, id=None, qr=None, code=None, token=None, expires=None):  # noqa: E501
        """InlineResponse20013Data - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._qr = None
        self._code = None
        self._token = None
        self._expires = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if qr is not None:
            self.qr = qr
        if code is not None:
            self.code = code
        if token is not None:
            self.token = token
        if expires is not None:
            self.expires = expires

    @property
    def id(self):
        """Gets the id of this InlineResponse20013Data.  # noqa: E501

        The receiver ID  # noqa: E501

        :return: The id of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20013Data.

        The receiver ID  # noqa: E501

        :param id: The id of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def qr(self):
        """Gets the qr of this InlineResponse20013Data.  # noqa: E501

        The URL to the QR code image. Will be `null` unless `qr` is set to true  # noqa: E501

        :return: The qr of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._qr

    @qr.setter
    def qr(self, qr):
        """Sets the qr of this InlineResponse20013Data.

        The URL to the QR code image. Will be `null` unless `qr` is set to true  # noqa: E501

        :param qr: The qr of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """

        self._qr = qr

    @property
    def code(self):
        """Gets the code of this InlineResponse20013Data.  # noqa: E501

        The pairing code for the receiver  # noqa: E501

        :return: The code of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InlineResponse20013Data.

        The pairing code for the receiver  # noqa: E501

        :param code: The code of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def token(self):
        """Gets the token of this InlineResponse20013Data.  # noqa: E501

        The pairing token. Using this skips the need to confirm pairing  # noqa: E501

        :return: The token of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this InlineResponse20013Data.

        The pairing token. Using this skips the need to confirm pairing  # noqa: E501

        :param token: The token of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def expires(self):
        """Gets the expires of this InlineResponse20013Data.  # noqa: E501

        Number of seconds the pairing code information is valid for  # noqa: E501

        :return: The expires of this InlineResponse20013Data.  # noqa: E501
        :rtype: int
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this InlineResponse20013Data.

        Number of seconds the pairing code information is valid for  # noqa: E501

        :param expires: The expires of this InlineResponse20013Data.  # noqa: E501
        :type: int
        """

        self._expires = expires

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20013Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20013Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
