# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TVRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tv_rights': 'str'
    }

    attribute_map = {
        'tv_rights': 'tv_rights'
    }

    def __init__(self, tv_rights='unlimited'):  # noqa: E501
        """TVRights - a model defined in Swagger"""  # noqa: E501
        self._tv_rights = None
        self.discriminator = None
        if tv_rights is not None:
            self.tv_rights = tv_rights

    @property
    def tv_rights(self):
        """Gets the tv_rights of this TVRights.  # noqa: E501

        TV rights for the guest. Mappings to common PMS  **FIAS**  TV rights map to the `TV` field of an `RE` Fias message in the following way:  | Nevaya    | Fias | Description                      | |-----------|------|----------------------------------| | unlimited | TU   | Unlimited pay channels (default) | | no_pay    | TM   | No pay movies                    | | no_adult  | TX   | No adult movies                  | | no_tv     | TN   | No TV rights                     |  # noqa: E501

        :return: The tv_rights of this TVRights.  # noqa: E501
        :rtype: str
        """
        return self._tv_rights

    @tv_rights.setter
    def tv_rights(self, tv_rights):
        """Sets the tv_rights of this TVRights.

        TV rights for the guest. Mappings to common PMS  **FIAS**  TV rights map to the `TV` field of an `RE` Fias message in the following way:  | Nevaya    | Fias | Description                      | |-----------|------|----------------------------------| | unlimited | TU   | Unlimited pay channels (default) | | no_pay    | TM   | No pay movies                    | | no_adult  | TX   | No adult movies                  | | no_tv     | TN   | No TV rights                     |  # noqa: E501

        :param tv_rights: The tv_rights of this TVRights.  # noqa: E501
        :type: str
        """
        allowed_values = ["unlimited", "no_pay", "no_adult", "no_tv"]  # noqa: E501
        if tv_rights not in allowed_values:
            raise ValueError(
                "Invalid value for `tv_rights` ({0}), must be one of {1}"  # noqa: E501
                .format(tv_rights, allowed_values)
            )

        self._tv_rights = tv_rights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TVRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TVRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
