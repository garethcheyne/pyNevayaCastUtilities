# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllWeatherFeelsLike(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day': 'float',
        'night': 'float',
        'eve': 'float',
        'morn': 'float'
    }

    attribute_map = {
        'day': 'day',
        'night': 'night',
        'eve': 'eve',
        'morn': 'morn'
    }

    def __init__(self, day=None, night=None, eve=None, morn=None):  # noqa: E501
        """AllWeatherFeelsLike - a model defined in Swagger"""  # noqa: E501
        self._day = None
        self._night = None
        self._eve = None
        self._morn = None
        self.discriminator = None
        if day is not None:
            self.day = day
        if night is not None:
            self.night = night
        if eve is not None:
            self.eve = eve
        if morn is not None:
            self.morn = morn

    @property
    def day(self):
        """Gets the day of this AllWeatherFeelsLike.  # noqa: E501

        Day temperature, in Kelvin  # noqa: E501

        :return: The day of this AllWeatherFeelsLike.  # noqa: E501
        :rtype: float
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this AllWeatherFeelsLike.

        Day temperature, in Kelvin  # noqa: E501

        :param day: The day of this AllWeatherFeelsLike.  # noqa: E501
        :type: float
        """

        self._day = day

    @property
    def night(self):
        """Gets the night of this AllWeatherFeelsLike.  # noqa: E501

        Night temperature, in Kelvin  # noqa: E501

        :return: The night of this AllWeatherFeelsLike.  # noqa: E501
        :rtype: float
        """
        return self._night

    @night.setter
    def night(self, night):
        """Sets the night of this AllWeatherFeelsLike.

        Night temperature, in Kelvin  # noqa: E501

        :param night: The night of this AllWeatherFeelsLike.  # noqa: E501
        :type: float
        """

        self._night = night

    @property
    def eve(self):
        """Gets the eve of this AllWeatherFeelsLike.  # noqa: E501

        Evening temperature, in Kelvin  # noqa: E501

        :return: The eve of this AllWeatherFeelsLike.  # noqa: E501
        :rtype: float
        """
        return self._eve

    @eve.setter
    def eve(self, eve):
        """Sets the eve of this AllWeatherFeelsLike.

        Evening temperature, in Kelvin  # noqa: E501

        :param eve: The eve of this AllWeatherFeelsLike.  # noqa: E501
        :type: float
        """

        self._eve = eve

    @property
    def morn(self):
        """Gets the morn of this AllWeatherFeelsLike.  # noqa: E501

        Morning temperature, in Kelvin  # noqa: E501

        :return: The morn of this AllWeatherFeelsLike.  # noqa: E501
        :rtype: float
        """
        return self._morn

    @morn.setter
    def morn(self, morn):
        """Sets the morn of this AllWeatherFeelsLike.

        Morning temperature, in Kelvin  # noqa: E501

        :param morn: The morn of this AllWeatherFeelsLike.  # noqa: E501
        :type: float
        """

        self._morn = morn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllWeatherFeelsLike, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllWeatherFeelsLike):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
