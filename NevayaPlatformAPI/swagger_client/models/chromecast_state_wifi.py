# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChromecastStateWifi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hotspot_bssid': 'str',
        'noise': 'int',
        'signal': 'int',
        'ssid': 'str',
        'snr': 'int'
    }

    attribute_map = {
        'hotspot_bssid': 'hotspot_bssid',
        'noise': 'noise',
        'signal': 'signal',
        'ssid': 'ssid',
        'snr': 'snr'
    }

    def __init__(self, hotspot_bssid=None, noise=None, signal=None, ssid=None, snr=None):  # noqa: E501
        """ChromecastStateWifi - a model defined in Swagger"""  # noqa: E501
        self._hotspot_bssid = None
        self._noise = None
        self._signal = None
        self._ssid = None
        self._snr = None
        self.discriminator = None
        if hotspot_bssid is not None:
            self.hotspot_bssid = hotspot_bssid
        if noise is not None:
            self.noise = noise
        if signal is not None:
            self.signal = signal
        if ssid is not None:
            self.ssid = ssid
        if snr is not None:
            self.snr = snr

    @property
    def hotspot_bssid(self):
        """Gets the hotspot_bssid of this ChromecastStateWifi.  # noqa: E501


        :return: The hotspot_bssid of this ChromecastStateWifi.  # noqa: E501
        :rtype: str
        """
        return self._hotspot_bssid

    @hotspot_bssid.setter
    def hotspot_bssid(self, hotspot_bssid):
        """Sets the hotspot_bssid of this ChromecastStateWifi.


        :param hotspot_bssid: The hotspot_bssid of this ChromecastStateWifi.  # noqa: E501
        :type: str
        """

        self._hotspot_bssid = hotspot_bssid

    @property
    def noise(self):
        """Gets the noise of this ChromecastStateWifi.  # noqa: E501


        :return: The noise of this ChromecastStateWifi.  # noqa: E501
        :rtype: int
        """
        return self._noise

    @noise.setter
    def noise(self, noise):
        """Sets the noise of this ChromecastStateWifi.


        :param noise: The noise of this ChromecastStateWifi.  # noqa: E501
        :type: int
        """

        self._noise = noise

    @property
    def signal(self):
        """Gets the signal of this ChromecastStateWifi.  # noqa: E501


        :return: The signal of this ChromecastStateWifi.  # noqa: E501
        :rtype: int
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this ChromecastStateWifi.


        :param signal: The signal of this ChromecastStateWifi.  # noqa: E501
        :type: int
        """

        self._signal = signal

    @property
    def ssid(self):
        """Gets the ssid of this ChromecastStateWifi.  # noqa: E501


        :return: The ssid of this ChromecastStateWifi.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this ChromecastStateWifi.


        :param ssid: The ssid of this ChromecastStateWifi.  # noqa: E501
        :type: str
        """

        self._ssid = ssid

    @property
    def snr(self):
        """Gets the snr of this ChromecastStateWifi.  # noqa: E501


        :return: The snr of this ChromecastStateWifi.  # noqa: E501
        :rtype: int
        """
        return self._snr

    @snr.setter
    def snr(self, snr):
        """Sets the snr of this ChromecastStateWifi.


        :param snr: The snr of this ChromecastStateWifi.  # noqa: E501
        :type: int
        """

        self._snr = snr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChromecastStateWifi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChromecastStateWifi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
