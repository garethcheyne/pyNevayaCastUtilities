# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllWeather(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timezone': 'str',
        'timezone_offset': 'int',
        'current': 'AllWeatherCurrent',
        'hourly': 'list[AllWeatherHourly]',
        'daily': 'list[AllWeatherDaily]'
    }

    attribute_map = {
        'timezone': 'timezone',
        'timezone_offset': 'timezone_offset',
        'current': 'current',
        'hourly': 'hourly',
        'daily': 'daily'
    }

    def __init__(self, timezone=None, timezone_offset=None, current=None, hourly=None, daily=None):  # noqa: E501
        """AllWeather - a model defined in Swagger"""  # noqa: E501
        self._timezone = None
        self._timezone_offset = None
        self._current = None
        self._hourly = None
        self._daily = None
        self.discriminator = None
        if timezone is not None:
            self.timezone = timezone
        if timezone_offset is not None:
            self.timezone_offset = timezone_offset
        if current is not None:
            self.current = current
        if hourly is not None:
            self.hourly = hourly
        if daily is not None:
            self.daily = daily

    @property
    def timezone(self):
        """Gets the timezone of this AllWeather.  # noqa: E501

        Timezone name for the requested location  # noqa: E501

        :return: The timezone of this AllWeather.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this AllWeather.

        Timezone name for the requested location  # noqa: E501

        :param timezone: The timezone of this AllWeather.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def timezone_offset(self):
        """Gets the timezone_offset of this AllWeather.  # noqa: E501

        Shift in seconds from UTC  # noqa: E501

        :return: The timezone_offset of this AllWeather.  # noqa: E501
        :rtype: int
        """
        return self._timezone_offset

    @timezone_offset.setter
    def timezone_offset(self, timezone_offset):
        """Sets the timezone_offset of this AllWeather.

        Shift in seconds from UTC  # noqa: E501

        :param timezone_offset: The timezone_offset of this AllWeather.  # noqa: E501
        :type: int
        """

        self._timezone_offset = timezone_offset

    @property
    def current(self):
        """Gets the current of this AllWeather.  # noqa: E501


        :return: The current of this AllWeather.  # noqa: E501
        :rtype: AllWeatherCurrent
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this AllWeather.


        :param current: The current of this AllWeather.  # noqa: E501
        :type: AllWeatherCurrent
        """

        self._current = current

    @property
    def hourly(self):
        """Gets the hourly of this AllWeather.  # noqa: E501


        :return: The hourly of this AllWeather.  # noqa: E501
        :rtype: list[AllWeatherHourly]
        """
        return self._hourly

    @hourly.setter
    def hourly(self, hourly):
        """Sets the hourly of this AllWeather.


        :param hourly: The hourly of this AllWeather.  # noqa: E501
        :type: list[AllWeatherHourly]
        """

        self._hourly = hourly

    @property
    def daily(self):
        """Gets the daily of this AllWeather.  # noqa: E501


        :return: The daily of this AllWeather.  # noqa: E501
        :rtype: list[AllWeatherDaily]
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this AllWeather.


        :param daily: The daily of this AllWeather.  # noqa: E501
        :type: list[AllWeatherDaily]
        """

        self._daily = daily

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllWeather, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllWeather):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
