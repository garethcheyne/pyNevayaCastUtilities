# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReceiverState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'volume': 'int',
        'mute': 'bool',
        'power': 'str',
        'timestamp': 'int',
        'error': 'str',
        'player': 'ReceiverStatePlayer'
    }

    attribute_map = {
        'volume': 'volume',
        'mute': 'mute',
        'power': 'power',
        'timestamp': 'timestamp',
        'error': 'error',
        'player': 'player'
    }

    def __init__(self, volume=None, mute=None, power=None, timestamp=None, error=None, player=None):  # noqa: E501
        """ReceiverState - a model defined in Swagger"""  # noqa: E501
        self._volume = None
        self._mute = None
        self._power = None
        self._timestamp = None
        self._error = None
        self._player = None
        self.discriminator = None
        if volume is not None:
            self.volume = volume
        if mute is not None:
            self.mute = mute
        if power is not None:
            self.power = power
        if timestamp is not None:
            self.timestamp = timestamp
        if error is not None:
            self.error = error
        if player is not None:
            self.player = player

    @property
    def volume(self):
        """Gets the volume of this ReceiverState.  # noqa: E501


        :return: The volume of this ReceiverState.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ReceiverState.


        :param volume: The volume of this ReceiverState.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def mute(self):
        """Gets the mute of this ReceiverState.  # noqa: E501


        :return: The mute of this ReceiverState.  # noqa: E501
        :rtype: bool
        """
        return self._mute

    @mute.setter
    def mute(self, mute):
        """Sets the mute of this ReceiverState.


        :param mute: The mute of this ReceiverState.  # noqa: E501
        :type: bool
        """

        self._mute = mute

    @property
    def power(self):
        """Gets the power of this ReceiverState.  # noqa: E501


        :return: The power of this ReceiverState.  # noqa: E501
        :rtype: str
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this ReceiverState.


        :param power: The power of this ReceiverState.  # noqa: E501
        :type: str
        """
        allowed_values = ["on", "off"]  # noqa: E501
        if power not in allowed_values:
            raise ValueError(
                "Invalid value for `power` ({0}), must be one of {1}"  # noqa: E501
                .format(power, allowed_values)
            )

        self._power = power

    @property
    def timestamp(self):
        """Gets the timestamp of this ReceiverState.  # noqa: E501

        Unix timestamp  # noqa: E501

        :return: The timestamp of this ReceiverState.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ReceiverState.

        Unix timestamp  # noqa: E501

        :param timestamp: The timestamp of this ReceiverState.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def error(self):
        """Gets the error of this ReceiverState.  # noqa: E501

        `offline`: TV is considered offline  `no_info`: No state information found   # noqa: E501

        :return: The error of this ReceiverState.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ReceiverState.

        `offline`: TV is considered offline  `no_info`: No state information found   # noqa: E501

        :param error: The error of this ReceiverState.  # noqa: E501
        :type: str
        """
        allowed_values = ["offline", "no_info"]  # noqa: E501
        if error not in allowed_values:
            raise ValueError(
                "Invalid value for `error` ({0}), must be one of {1}"  # noqa: E501
                .format(error, allowed_values)
            )

        self._error = error

    @property
    def player(self):
        """Gets the player of this ReceiverState.  # noqa: E501


        :return: The player of this ReceiverState.  # noqa: E501
        :rtype: ReceiverStatePlayer
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this ReceiverState.


        :param player: The player of this ReceiverState.  # noqa: E501
        :type: ReceiverStatePlayer
        """

        self._player = player

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceiverState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceiverState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
