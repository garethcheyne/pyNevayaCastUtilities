# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllOfinlineResponse20024DataMoviesItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'year': 'int',
        'hd': 'bool',
        'adult': 'bool',
        'valid_for': 'int',
        'movie_languages': 'list[MovieMovieLanguages]',
        'tmdb_id': 'str',
        'short_description': 'str',
        'description': 'str',
        'genres': 'str',
        'sub_genres': 'str',
        'directors': 'str',
        'actors': 'str',
        'audio_languages': 'str',
        'rating': 'str',
        'runtime': 'int',
        'price': 'int',
        'images': 'MovieImages',
        'genre_ids': 'list[str]',
        'sub_genre_ids': 'list[int]',
        'dvd_release_date': 'date',
        'valid_to': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'year': 'year',
        'hd': 'hd',
        'adult': 'adult',
        'valid_for': 'valid_for',
        'movie_languages': 'movie_languages',
        'tmdb_id': 'tmdb_id',
        'short_description': 'short_description',
        'description': 'description',
        'genres': 'genres',
        'sub_genres': 'sub_genres',
        'directors': 'directors',
        'actors': 'actors',
        'audio_languages': 'audio_languages',
        'rating': 'rating',
        'runtime': 'runtime',
        'price': 'price',
        'images': 'images',
        'genre_ids': 'genre_ids',
        'sub_genre_ids': 'sub_genre_ids',
        'dvd_release_date': 'dvd_release_date',
        'valid_to': 'valid_to'
    }

    def __init__(self, id=None, name=None, year=None, hd=None, adult=None, valid_for=None, movie_languages=None, tmdb_id=None, short_description=None, description=None, genres=None, sub_genres=None, directors=None, actors=None, audio_languages=None, rating=None, runtime=None, price=None, images=None, genre_ids=None, sub_genre_ids=None, dvd_release_date=None, valid_to=None):  # noqa: E501
        """AllOfinlineResponse20024DataMoviesItems - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._year = None
        self._hd = None
        self._adult = None
        self._valid_for = None
        self._movie_languages = None
        self._tmdb_id = None
        self._short_description = None
        self._description = None
        self._genres = None
        self._sub_genres = None
        self._directors = None
        self._actors = None
        self._audio_languages = None
        self._rating = None
        self._runtime = None
        self._price = None
        self._images = None
        self._genre_ids = None
        self._sub_genre_ids = None
        self._dvd_release_date = None
        self._valid_to = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if year is not None:
            self.year = year
        if hd is not None:
            self.hd = hd
        if adult is not None:
            self.adult = adult
        if valid_for is not None:
            self.valid_for = valid_for
        if movie_languages is not None:
            self.movie_languages = movie_languages
        if tmdb_id is not None:
            self.tmdb_id = tmdb_id
        if short_description is not None:
            self.short_description = short_description
        if description is not None:
            self.description = description
        if genres is not None:
            self.genres = genres
        if sub_genres is not None:
            self.sub_genres = sub_genres
        if directors is not None:
            self.directors = directors
        if actors is not None:
            self.actors = actors
        if audio_languages is not None:
            self.audio_languages = audio_languages
        if rating is not None:
            self.rating = rating
        if runtime is not None:
            self.runtime = runtime
        if price is not None:
            self.price = price
        if images is not None:
            self.images = images
        if genre_ids is not None:
            self.genre_ids = genre_ids
        if sub_genre_ids is not None:
            self.sub_genre_ids = sub_genre_ids
        if dvd_release_date is not None:
            self.dvd_release_date = dvd_release_date
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def id(self):
        """Gets the id of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501


        :return: The id of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AllOfinlineResponse20024DataMoviesItems.


        :param id: The id of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501


        :return: The name of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AllOfinlineResponse20024DataMoviesItems.


        :param name: The name of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def year(self):
        """Gets the year of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501


        :return: The year of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this AllOfinlineResponse20024DataMoviesItems.


        :param year: The year of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def hd(self):
        """Gets the hd of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501


        :return: The hd of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: bool
        """
        return self._hd

    @hd.setter
    def hd(self, hd):
        """Sets the hd of this AllOfinlineResponse20024DataMoviesItems.


        :param hd: The hd of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: bool
        """

        self._hd = hd

    @property
    def adult(self):
        """Gets the adult of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501


        :return: The adult of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """Sets the adult of this AllOfinlineResponse20024DataMoviesItems.


        :param adult: The adult of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: bool
        """

        self._adult = adult

    @property
    def valid_for(self):
        """Gets the valid_for of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        How many hours after purchase can a movie be watched for  # noqa: E501

        :return: The valid_for of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: int
        """
        return self._valid_for

    @valid_for.setter
    def valid_for(self, valid_for):
        """Sets the valid_for of this AllOfinlineResponse20024DataMoviesItems.

        How many hours after purchase can a movie be watched for  # noqa: E501

        :param valid_for: The valid_for of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: int
        """

        self._valid_for = valid_for

    @property
    def movie_languages(self):
        """Gets the movie_languages of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        List of available audio languages for the movie:  | Code   | Language     |                                  | |--------|--------------|----------------------------------| | en | English      |                                  | | fr | Français     |                                  | | es | Español      |                                  | | de | Deutsch      |                                  | | it | Italiano     |                                  | | un | Undetermined | _Generally this will be English_ | | nl | Nederlands   |                                  |  # noqa: E501

        :return: The movie_languages of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: list[MovieMovieLanguages]
        """
        return self._movie_languages

    @movie_languages.setter
    def movie_languages(self, movie_languages):
        """Sets the movie_languages of this AllOfinlineResponse20024DataMoviesItems.

        List of available audio languages for the movie:  | Code   | Language     |                                  | |--------|--------------|----------------------------------| | en | English      |                                  | | fr | Français     |                                  | | es | Español      |                                  | | de | Deutsch      |                                  | | it | Italiano     |                                  | | un | Undetermined | _Generally this will be English_ | | nl | Nederlands   |                                  |  # noqa: E501

        :param movie_languages: The movie_languages of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: list[MovieMovieLanguages]
        """

        self._movie_languages = movie_languages

    @property
    def tmdb_id(self):
        """Gets the tmdb_id of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        ID to be used with https://www.themoviedb.org/  # noqa: E501

        :return: The tmdb_id of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._tmdb_id

    @tmdb_id.setter
    def tmdb_id(self, tmdb_id):
        """Sets the tmdb_id of this AllOfinlineResponse20024DataMoviesItems.

        ID to be used with https://www.themoviedb.org/  # noqa: E501

        :param tmdb_id: The tmdb_id of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """

        self._tmdb_id = tmdb_id

    @property
    def short_description(self):
        """Gets the short_description of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501


        :return: The short_description of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this AllOfinlineResponse20024DataMoviesItems.


        :param short_description: The short_description of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def description(self):
        """Gets the description of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501


        :return: The description of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AllOfinlineResponse20024DataMoviesItems.


        :param description: The description of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def genres(self):
        """Gets the genres of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        List of genres for display purposes  # noqa: E501

        :return: The genres of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this AllOfinlineResponse20024DataMoviesItems.

        List of genres for display purposes  # noqa: E501

        :param genres: The genres of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """

        self._genres = genres

    @property
    def sub_genres(self):
        """Gets the sub_genres of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        List of sub genres for display purposes  # noqa: E501

        :return: The sub_genres of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._sub_genres

    @sub_genres.setter
    def sub_genres(self, sub_genres):
        """Sets the sub_genres of this AllOfinlineResponse20024DataMoviesItems.

        List of sub genres for display purposes  # noqa: E501

        :param sub_genres: The sub_genres of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """

        self._sub_genres = sub_genres

    @property
    def directors(self):
        """Gets the directors of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        List of directors' names  # noqa: E501

        :return: The directors of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._directors

    @directors.setter
    def directors(self, directors):
        """Sets the directors of this AllOfinlineResponse20024DataMoviesItems.

        List of directors' names  # noqa: E501

        :param directors: The directors of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """

        self._directors = directors

    @property
    def actors(self):
        """Gets the actors of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        List of actors' names  # noqa: E501

        :return: The actors of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._actors

    @actors.setter
    def actors(self, actors):
        """Sets the actors of this AllOfinlineResponse20024DataMoviesItems.

        List of actors' names  # noqa: E501

        :param actors: The actors of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """

        self._actors = actors

    @property
    def audio_languages(self):
        """Gets the audio_languages of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        Audio languages available  # noqa: E501

        :return: The audio_languages of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._audio_languages

    @audio_languages.setter
    def audio_languages(self, audio_languages):
        """Sets the audio_languages of this AllOfinlineResponse20024DataMoviesItems.

        Audio languages available  # noqa: E501

        :param audio_languages: The audio_languages of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """

        self._audio_languages = audio_languages

    @property
    def rating(self):
        """Gets the rating of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        BBFC rating  # noqa: E501

        :return: The rating of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this AllOfinlineResponse20024DataMoviesItems.

        BBFC rating  # noqa: E501

        :param rating: The rating of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["12A", "U", "PG", "15", "18", "R18", "12"]  # noqa: E501
        if rating not in allowed_values:
            raise ValueError(
                "Invalid value for `rating` ({0}), must be one of {1}"  # noqa: E501
                .format(rating, allowed_values)
            )

        self._rating = rating

    @property
    def runtime(self):
        """Gets the runtime of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        Movie runtime in minutes  # noqa: E501

        :return: The runtime of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: int
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this AllOfinlineResponse20024DataMoviesItems.

        Movie runtime in minutes  # noqa: E501

        :param runtime: The runtime of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: int
        """

        self._runtime = runtime

    @property
    def price(self):
        """Gets the price of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        Movie price in pence  # noqa: E501

        :return: The price of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AllOfinlineResponse20024DataMoviesItems.

        Movie price in pence  # noqa: E501

        :param price: The price of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def images(self):
        """Gets the images of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501


        :return: The images of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: MovieImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this AllOfinlineResponse20024DataMoviesItems.


        :param images: The images of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: MovieImages
        """

        self._images = images

    @property
    def genre_ids(self):
        """Gets the genre_ids of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501


        :return: The genre_ids of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: list[str]
        """
        return self._genre_ids

    @genre_ids.setter
    def genre_ids(self, genre_ids):
        """Sets the genre_ids of this AllOfinlineResponse20024DataMoviesItems.


        :param genre_ids: The genre_ids of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: list[str]
        """

        self._genre_ids = genre_ids

    @property
    def sub_genre_ids(self):
        """Gets the sub_genre_ids of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501


        :return: The sub_genre_ids of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: list[int]
        """
        return self._sub_genre_ids

    @sub_genre_ids.setter
    def sub_genre_ids(self, sub_genre_ids):
        """Sets the sub_genre_ids of this AllOfinlineResponse20024DataMoviesItems.


        :param sub_genre_ids: The sub_genre_ids of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: list[int]
        """

        self._sub_genre_ids = sub_genre_ids

    @property
    def dvd_release_date(self):
        """Gets the dvd_release_date of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        Date the movie was released on DVD  # noqa: E501

        :return: The dvd_release_date of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: date
        """
        return self._dvd_release_date

    @dvd_release_date.setter
    def dvd_release_date(self, dvd_release_date):
        """Sets the dvd_release_date of this AllOfinlineResponse20024DataMoviesItems.

        Date the movie was released on DVD  # noqa: E501

        :param dvd_release_date: The dvd_release_date of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: date
        """

        self._dvd_release_date = dvd_release_date

    @property
    def valid_to(self):
        """Gets the valid_to of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501

        If present, indicates the movie has been purchased and when access ends  # noqa: E501

        :return: The valid_to of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this AllOfinlineResponse20024DataMoviesItems.

        If present, indicates the movie has been purchased and when access ends  # noqa: E501

        :param valid_to: The valid_to of this AllOfinlineResponse20024DataMoviesItems.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfinlineResponse20024DataMoviesItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfinlineResponse20024DataMoviesItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
