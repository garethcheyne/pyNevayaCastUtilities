# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrentWeatherMain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'temp': 'float',
        'feels_like': 'float',
        'temp_min': 'float',
        'temp_max': 'float',
        'pressure': 'float',
        'humidity': 'float'
    }

    attribute_map = {
        'temp': 'temp',
        'feels_like': 'feels_like',
        'temp_min': 'temp_min',
        'temp_max': 'temp_max',
        'pressure': 'pressure',
        'humidity': 'humidity'
    }

    def __init__(self, temp=None, feels_like=None, temp_min=None, temp_max=None, pressure=None, humidity=None):  # noqa: E501
        """CurrentWeatherMain - a model defined in Swagger"""  # noqa: E501
        self._temp = None
        self._feels_like = None
        self._temp_min = None
        self._temp_max = None
        self._pressure = None
        self._humidity = None
        self.discriminator = None
        if temp is not None:
            self.temp = temp
        if feels_like is not None:
            self.feels_like = feels_like
        if temp_min is not None:
            self.temp_min = temp_min
        if temp_max is not None:
            self.temp_max = temp_max
        if pressure is not None:
            self.pressure = pressure
        if humidity is not None:
            self.humidity = humidity

    @property
    def temp(self):
        """Gets the temp of this CurrentWeatherMain.  # noqa: E501

        Temperature, in Kelvin  # noqa: E501

        :return: The temp of this CurrentWeatherMain.  # noqa: E501
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this CurrentWeatherMain.

        Temperature, in Kelvin  # noqa: E501

        :param temp: The temp of this CurrentWeatherMain.  # noqa: E501
        :type: float
        """

        self._temp = temp

    @property
    def feels_like(self):
        """Gets the feels_like of this CurrentWeatherMain.  # noqa: E501

        Temperature. This temperature parameter accounts for the human perception of weather, in Kelvin  # noqa: E501

        :return: The feels_like of this CurrentWeatherMain.  # noqa: E501
        :rtype: float
        """
        return self._feels_like

    @feels_like.setter
    def feels_like(self, feels_like):
        """Sets the feels_like of this CurrentWeatherMain.

        Temperature. This temperature parameter accounts for the human perception of weather, in Kelvin  # noqa: E501

        :param feels_like: The feels_like of this CurrentWeatherMain.  # noqa: E501
        :type: float
        """

        self._feels_like = feels_like

    @property
    def temp_min(self):
        """Gets the temp_min of this CurrentWeatherMain.  # noqa: E501

        Minimum temperature at the moment, in Kelvin  # noqa: E501

        :return: The temp_min of this CurrentWeatherMain.  # noqa: E501
        :rtype: float
        """
        return self._temp_min

    @temp_min.setter
    def temp_min(self, temp_min):
        """Sets the temp_min of this CurrentWeatherMain.

        Minimum temperature at the moment, in Kelvin  # noqa: E501

        :param temp_min: The temp_min of this CurrentWeatherMain.  # noqa: E501
        :type: float
        """

        self._temp_min = temp_min

    @property
    def temp_max(self):
        """Gets the temp_max of this CurrentWeatherMain.  # noqa: E501

        Maximum temperature at the moment, in Kelvin  # noqa: E501

        :return: The temp_max of this CurrentWeatherMain.  # noqa: E501
        :rtype: float
        """
        return self._temp_max

    @temp_max.setter
    def temp_max(self, temp_max):
        """Sets the temp_max of this CurrentWeatherMain.

        Maximum temperature at the moment, in Kelvin  # noqa: E501

        :param temp_max: The temp_max of this CurrentWeatherMain.  # noqa: E501
        :type: float
        """

        self._temp_max = temp_max

    @property
    def pressure(self):
        """Gets the pressure of this CurrentWeatherMain.  # noqa: E501

        Atmospheric pressure, in hPa  # noqa: E501

        :return: The pressure of this CurrentWeatherMain.  # noqa: E501
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this CurrentWeatherMain.

        Atmospheric pressure, in hPa  # noqa: E501

        :param pressure: The pressure of this CurrentWeatherMain.  # noqa: E501
        :type: float
        """

        self._pressure = pressure

    @property
    def humidity(self):
        """Gets the humidity of this CurrentWeatherMain.  # noqa: E501

        Humidity, %  # noqa: E501

        :return: The humidity of this CurrentWeatherMain.  # noqa: E501
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this CurrentWeatherMain.

        Humidity, %  # noqa: E501

        :param humidity: The humidity of this CurrentWeatherMain.  # noqa: E501
        :type: float
        """

        self._humidity = humidity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentWeatherMain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentWeatherMain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
