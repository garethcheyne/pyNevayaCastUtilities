# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChromecastStateApp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'status_text': 'str',
        'idle_screen': 'bool',
        'started_at': 'datetime',
        'id': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'status_text': 'status_text',
        'idle_screen': 'idle_screen',
        'started_at': 'started_at',
        'id': 'id'
    }

    def __init__(self, display_name=None, status_text=None, idle_screen=None, started_at=None, id=None):  # noqa: E501
        """ChromecastStateApp - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._status_text = None
        self._idle_screen = None
        self._started_at = None
        self._id = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if status_text is not None:
            self.status_text = status_text
        if idle_screen is not None:
            self.idle_screen = idle_screen
        if started_at is not None:
            self.started_at = started_at
        if id is not None:
            self.id = id

    @property
    def display_name(self):
        """Gets the display_name of this ChromecastStateApp.  # noqa: E501


        :return: The display_name of this ChromecastStateApp.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ChromecastStateApp.


        :param display_name: The display_name of this ChromecastStateApp.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def status_text(self):
        """Gets the status_text of this ChromecastStateApp.  # noqa: E501


        :return: The status_text of this ChromecastStateApp.  # noqa: E501
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this ChromecastStateApp.


        :param status_text: The status_text of this ChromecastStateApp.  # noqa: E501
        :type: str
        """

        self._status_text = status_text

    @property
    def idle_screen(self):
        """Gets the idle_screen of this ChromecastStateApp.  # noqa: E501

        Is the chromecast showing the default Google screen  # noqa: E501

        :return: The idle_screen of this ChromecastStateApp.  # noqa: E501
        :rtype: bool
        """
        return self._idle_screen

    @idle_screen.setter
    def idle_screen(self, idle_screen):
        """Sets the idle_screen of this ChromecastStateApp.

        Is the chromecast showing the default Google screen  # noqa: E501

        :param idle_screen: The idle_screen of this ChromecastStateApp.  # noqa: E501
        :type: bool
        """

        self._idle_screen = idle_screen

    @property
    def started_at(self):
        """Gets the started_at of this ChromecastStateApp.  # noqa: E501

        When the application launched  # noqa: E501

        :return: The started_at of this ChromecastStateApp.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ChromecastStateApp.

        When the application launched  # noqa: E501

        :param started_at: The started_at of this ChromecastStateApp.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def id(self):
        """Gets the id of this ChromecastStateApp.  # noqa: E501

        The Google ID for the current application  # noqa: E501

        :return: The id of this ChromecastStateApp.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChromecastStateApp.

        The Google ID for the current application  # noqa: E501

        :param id: The id of this ChromecastStateApp.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChromecastStateApp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChromecastStateApp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
