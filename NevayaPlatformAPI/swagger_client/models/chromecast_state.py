# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChromecastState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wifi': 'ChromecastStateWifi',
        'app': 'ChromecastStateApp',
        'timestamp': 'datetime',
        'failed_at': 'datetime',
        'failure_reason': 'str'
    }

    attribute_map = {
        'wifi': 'wifi',
        'app': 'app',
        'timestamp': 'timestamp',
        'failed_at': 'failed_at',
        'failure_reason': 'failure_reason'
    }

    def __init__(self, wifi=None, app=None, timestamp=None, failed_at=None, failure_reason=None):  # noqa: E501
        """ChromecastState - a model defined in Swagger"""  # noqa: E501
        self._wifi = None
        self._app = None
        self._timestamp = None
        self._failed_at = None
        self._failure_reason = None
        self.discriminator = None
        if wifi is not None:
            self.wifi = wifi
        if app is not None:
            self.app = app
        if timestamp is not None:
            self.timestamp = timestamp
        if failed_at is not None:
            self.failed_at = failed_at
        if failure_reason is not None:
            self.failure_reason = failure_reason

    @property
    def wifi(self):
        """Gets the wifi of this ChromecastState.  # noqa: E501


        :return: The wifi of this ChromecastState.  # noqa: E501
        :rtype: ChromecastStateWifi
        """
        return self._wifi

    @wifi.setter
    def wifi(self, wifi):
        """Sets the wifi of this ChromecastState.


        :param wifi: The wifi of this ChromecastState.  # noqa: E501
        :type: ChromecastStateWifi
        """

        self._wifi = wifi

    @property
    def app(self):
        """Gets the app of this ChromecastState.  # noqa: E501


        :return: The app of this ChromecastState.  # noqa: E501
        :rtype: ChromecastStateApp
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this ChromecastState.


        :param app: The app of this ChromecastState.  # noqa: E501
        :type: ChromecastStateApp
        """

        self._app = app

    @property
    def timestamp(self):
        """Gets the timestamp of this ChromecastState.  # noqa: E501

        When the WiFi and app information were last updated  # noqa: E501

        :return: The timestamp of this ChromecastState.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ChromecastState.

        When the WiFi and app information were last updated  # noqa: E501

        :param timestamp: The timestamp of this ChromecastState.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def failed_at(self):
        """Gets the failed_at of this ChromecastState.  # noqa: E501

        If there was an issue retreiving the state this is the date and time that it happened  # noqa: E501

        :return: The failed_at of this ChromecastState.  # noqa: E501
        :rtype: datetime
        """
        return self._failed_at

    @failed_at.setter
    def failed_at(self, failed_at):
        """Sets the failed_at of this ChromecastState.

        If there was an issue retreiving the state this is the date and time that it happened  # noqa: E501

        :param failed_at: The failed_at of this ChromecastState.  # noqa: E501
        :type: datetime
        """

        self._failed_at = failed_at

    @property
    def failure_reason(self):
        """Gets the failure_reason of this ChromecastState.  # noqa: E501

        The reason retrieving the state failed  # noqa: E501

        :return: The failure_reason of this ChromecastState.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this ChromecastState.

        The reason retrieving the state failed  # noqa: E501

        :param failure_reason: The failure_reason of this ChromecastState.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChromecastState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChromecastState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
