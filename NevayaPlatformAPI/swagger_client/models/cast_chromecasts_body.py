# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CastChromecastsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_id': 'str',
        'room_ids': 'list[str]',
        'page': 'int',
        'per_page': 'int',
        'room_name_cont': 'str',
        'room_name_eq': 'str'
    }

    attribute_map = {
        'site_id': 'site_id',
        'room_ids': 'room_ids',
        'page': 'page',
        'per_page': 'per_page',
        'room_name_cont': 'room_name_cont',
        'room_name_eq': 'room_name_eq'
    }

    def __init__(self, site_id=None, room_ids=None, page=None, per_page=None, room_name_cont=None, room_name_eq=None):  # noqa: E501
        """CastChromecastsBody - a model defined in Swagger"""  # noqa: E501
        self._site_id = None
        self._room_ids = None
        self._page = None
        self._per_page = None
        self._room_name_cont = None
        self._room_name_eq = None
        self.discriminator = None
        if site_id is not None:
            self.site_id = site_id
        if room_ids is not None:
            self.room_ids = room_ids
        if page is not None:
            self.page = page
        if per_page is not None:
            self.per_page = per_page
        if room_name_cont is not None:
            self.room_name_cont = room_name_cont
        if room_name_eq is not None:
            self.room_name_eq = room_name_eq

    @property
    def site_id(self):
        """Gets the site_id of this CastChromecastsBody.  # noqa: E501

        The site ID  # noqa: E501

        :return: The site_id of this CastChromecastsBody.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this CastChromecastsBody.

        The site ID  # noqa: E501

        :param site_id: The site_id of this CastChromecastsBody.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def room_ids(self):
        """Gets the room_ids of this CastChromecastsBody.  # noqa: E501

        Array of room IDs  # noqa: E501

        :return: The room_ids of this CastChromecastsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._room_ids

    @room_ids.setter
    def room_ids(self, room_ids):
        """Sets the room_ids of this CastChromecastsBody.

        Array of room IDs  # noqa: E501

        :param room_ids: The room_ids of this CastChromecastsBody.  # noqa: E501
        :type: list[str]
        """

        self._room_ids = room_ids

    @property
    def page(self):
        """Gets the page of this CastChromecastsBody.  # noqa: E501

        Current page  # noqa: E501

        :return: The page of this CastChromecastsBody.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this CastChromecastsBody.

        Current page  # noqa: E501

        :param page: The page of this CastChromecastsBody.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this CastChromecastsBody.  # noqa: E501

        Number of results per page  # noqa: E501

        :return: The per_page of this CastChromecastsBody.  # noqa: E501
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this CastChromecastsBody.

        Number of results per page  # noqa: E501

        :param per_page: The per_page of this CastChromecastsBody.  # noqa: E501
        :type: int
        """

        self._per_page = per_page

    @property
    def room_name_cont(self):
        """Gets the room_name_cont of this CastChromecastsBody.  # noqa: E501

        Return chromecasts based on a partial name match  # noqa: E501

        :return: The room_name_cont of this CastChromecastsBody.  # noqa: E501
        :rtype: str
        """
        return self._room_name_cont

    @room_name_cont.setter
    def room_name_cont(self, room_name_cont):
        """Sets the room_name_cont of this CastChromecastsBody.

        Return chromecasts based on a partial name match  # noqa: E501

        :param room_name_cont: The room_name_cont of this CastChromecastsBody.  # noqa: E501
        :type: str
        """

        self._room_name_cont = room_name_cont

    @property
    def room_name_eq(self):
        """Gets the room_name_eq of this CastChromecastsBody.  # noqa: E501

        Return chromecasts based on room name  # noqa: E501

        :return: The room_name_eq of this CastChromecastsBody.  # noqa: E501
        :rtype: str
        """
        return self._room_name_eq

    @room_name_eq.setter
    def room_name_eq(self, room_name_eq):
        """Sets the room_name_eq of this CastChromecastsBody.

        Return chromecasts based on room name  # noqa: E501

        :param room_name_eq: The room_name_eq of this CastChromecastsBody.  # noqa: E501
        :type: str
        """

        self._room_name_eq = room_name_eq

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CastChromecastsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CastChromecastsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
