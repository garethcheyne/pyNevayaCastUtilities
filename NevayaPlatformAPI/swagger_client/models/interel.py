# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Interel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lights': 'list[InterelLights]',
        'blinds': 'list[InterelBlinds]',
        'thermostats': 'list[InterelThermostats]',
        'scenes': 'list[InterelScenes]',
        'curtains': 'list[InterelCurtains]'
    }

    attribute_map = {
        'lights': 'lights',
        'blinds': 'blinds',
        'thermostats': 'thermostats',
        'scenes': 'scenes',
        'curtains': 'curtains'
    }

    def __init__(self, lights=None, blinds=None, thermostats=None, scenes=None, curtains=None):  # noqa: E501
        """Interel - a model defined in Swagger"""  # noqa: E501
        self._lights = None
        self._blinds = None
        self._thermostats = None
        self._scenes = None
        self._curtains = None
        self.discriminator = None
        if lights is not None:
            self.lights = lights
        if blinds is not None:
            self.blinds = blinds
        if thermostats is not None:
            self.thermostats = thermostats
        if scenes is not None:
            self.scenes = scenes
        if curtains is not None:
            self.curtains = curtains

    @property
    def lights(self):
        """Gets the lights of this Interel.  # noqa: E501

        List of lights available  # noqa: E501

        :return: The lights of this Interel.  # noqa: E501
        :rtype: list[InterelLights]
        """
        return self._lights

    @lights.setter
    def lights(self, lights):
        """Sets the lights of this Interel.

        List of lights available  # noqa: E501

        :param lights: The lights of this Interel.  # noqa: E501
        :type: list[InterelLights]
        """

        self._lights = lights

    @property
    def blinds(self):
        """Gets the blinds of this Interel.  # noqa: E501

        List of controllable blinds  # noqa: E501

        :return: The blinds of this Interel.  # noqa: E501
        :rtype: list[InterelBlinds]
        """
        return self._blinds

    @blinds.setter
    def blinds(self, blinds):
        """Sets the blinds of this Interel.

        List of controllable blinds  # noqa: E501

        :param blinds: The blinds of this Interel.  # noqa: E501
        :type: list[InterelBlinds]
        """

        self._blinds = blinds

    @property
    def thermostats(self):
        """Gets the thermostats of this Interel.  # noqa: E501

        List of available thermostats  # noqa: E501

        :return: The thermostats of this Interel.  # noqa: E501
        :rtype: list[InterelThermostats]
        """
        return self._thermostats

    @thermostats.setter
    def thermostats(self, thermostats):
        """Sets the thermostats of this Interel.

        List of available thermostats  # noqa: E501

        :param thermostats: The thermostats of this Interel.  # noqa: E501
        :type: list[InterelThermostats]
        """

        self._thermostats = thermostats

    @property
    def scenes(self):
        """Gets the scenes of this Interel.  # noqa: E501

        List of scenes available  # noqa: E501

        :return: The scenes of this Interel.  # noqa: E501
        :rtype: list[InterelScenes]
        """
        return self._scenes

    @scenes.setter
    def scenes(self, scenes):
        """Sets the scenes of this Interel.

        List of scenes available  # noqa: E501

        :param scenes: The scenes of this Interel.  # noqa: E501
        :type: list[InterelScenes]
        """

        self._scenes = scenes

    @property
    def curtains(self):
        """Gets the curtains of this Interel.  # noqa: E501

        List of curtains available  # noqa: E501

        :return: The curtains of this Interel.  # noqa: E501
        :rtype: list[InterelCurtains]
        """
        return self._curtains

    @curtains.setter
    def curtains(self, curtains):
        """Sets the curtains of this Interel.

        List of curtains available  # noqa: E501

        :param curtains: The curtains of this Interel.  # noqa: E501
        :type: list[InterelCurtains]
        """

        self._curtains = curtains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Interel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Interel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
