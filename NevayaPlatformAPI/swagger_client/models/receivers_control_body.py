# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReceiversControlBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'receiver_id': 'str',
        'volume': 'int',
        'mute': 'bool',
        'key': 'str',
        'power': 'str',
        'seek': 'int',
        'room_tag_id': 'str'
    }

    attribute_map = {
        'receiver_id': 'receiver_id',
        'volume': 'volume',
        'mute': 'mute',
        'key': 'key',
        'power': 'power',
        'seek': 'seek',
        'room_tag_id': 'room_tag_id'
    }

    def __init__(self, receiver_id=None, volume=None, mute=None, key=None, power=None, seek=None, room_tag_id=None):  # noqa: E501
        """ReceiversControlBody - a model defined in Swagger"""  # noqa: E501
        self._receiver_id = None
        self._volume = None
        self._mute = None
        self._key = None
        self._power = None
        self._seek = None
        self._room_tag_id = None
        self.discriminator = None
        if receiver_id is not None:
            self.receiver_id = receiver_id
        if volume is not None:
            self.volume = volume
        if mute is not None:
            self.mute = mute
        if key is not None:
            self.key = key
        if power is not None:
            self.power = power
        if seek is not None:
            self.seek = seek
        if room_tag_id is not None:
            self.room_tag_id = room_tag_id

    @property
    def receiver_id(self):
        """Gets the receiver_id of this ReceiversControlBody.  # noqa: E501

        The receiver ID  # noqa: E501

        :return: The receiver_id of this ReceiversControlBody.  # noqa: E501
        :rtype: str
        """
        return self._receiver_id

    @receiver_id.setter
    def receiver_id(self, receiver_id):
        """Sets the receiver_id of this ReceiversControlBody.

        The receiver ID  # noqa: E501

        :param receiver_id: The receiver_id of this ReceiversControlBody.  # noqa: E501
        :type: str
        """

        self._receiver_id = receiver_id

    @property
    def volume(self):
        """Gets the volume of this ReceiversControlBody.  # noqa: E501


        :return: The volume of this ReceiversControlBody.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ReceiversControlBody.


        :param volume: The volume of this ReceiversControlBody.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def mute(self):
        """Gets the mute of this ReceiversControlBody.  # noqa: E501


        :return: The mute of this ReceiversControlBody.  # noqa: E501
        :rtype: bool
        """
        return self._mute

    @mute.setter
    def mute(self, mute):
        """Sets the mute of this ReceiversControlBody.


        :param mute: The mute of this ReceiversControlBody.  # noqa: E501
        :type: bool
        """

        self._mute = mute

    @property
    def key(self):
        """Gets the key of this ReceiversControlBody.  # noqa: E501


        :return: The key of this ReceiversControlBody.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ReceiversControlBody.


        :param key: The key of this ReceiversControlBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["back", "exit", "select", "up", "down", "right", "left", "channel_up", "channel_down", "mute", "unmute", "volume_up", "volume_down", "forward", "rewind", "stop", "pause", "play", "power"]  # noqa: E501
        if key not in allowed_values:
            raise ValueError(
                "Invalid value for `key` ({0}), must be one of {1}"  # noqa: E501
                .format(key, allowed_values)
            )

        self._key = key

    @property
    def power(self):
        """Gets the power of this ReceiversControlBody.  # noqa: E501


        :return: The power of this ReceiversControlBody.  # noqa: E501
        :rtype: str
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this ReceiversControlBody.


        :param power: The power of this ReceiversControlBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["on", "off"]  # noqa: E501
        if power not in allowed_values:
            raise ValueError(
                "Invalid value for `power` ({0}), must be one of {1}"  # noqa: E501
                .format(power, allowed_values)
            )

        self._power = power

    @property
    def seek(self):
        """Gets the seek of this ReceiversControlBody.  # noqa: E501

        Position in milliseconds to seek to when playing a movie.  # noqa: E501

        :return: The seek of this ReceiversControlBody.  # noqa: E501
        :rtype: int
        """
        return self._seek

    @seek.setter
    def seek(self, seek):
        """Sets the seek of this ReceiversControlBody.

        Position in milliseconds to seek to when playing a movie.  # noqa: E501

        :param seek: The seek of this ReceiversControlBody.  # noqa: E501
        :type: int
        """

        self._seek = seek

    @property
    def room_tag_id(self):
        """Gets the room_tag_id of this ReceiversControlBody.  # noqa: E501

        Control all receivers in a room tagged with this room tag  # noqa: E501

        :return: The room_tag_id of this ReceiversControlBody.  # noqa: E501
        :rtype: str
        """
        return self._room_tag_id

    @room_tag_id.setter
    def room_tag_id(self, room_tag_id):
        """Sets the room_tag_id of this ReceiversControlBody.

        Control all receivers in a room tagged with this room tag  # noqa: E501

        :param room_tag_id: The room_tag_id of this ReceiversControlBody.  # noqa: E501
        :type: str
        """

        self._room_tag_id = room_tag_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceiversControlBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceiversControlBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
