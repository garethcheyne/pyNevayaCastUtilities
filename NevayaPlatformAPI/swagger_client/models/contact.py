# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Contact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'email': 'str',
        'contact_type': 'str',
        'notes': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'contact_type': 'contact_type',
        'notes': 'notes',
        'phone': 'phone'
    }

    def __init__(self, name=None, email=None, contact_type=None, notes=None, phone=None):  # noqa: E501
        """Contact - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._email = None
        self._contact_type = None
        self._notes = None
        self._phone = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if contact_type is not None:
            self.contact_type = contact_type
        if notes is not None:
            self.notes = notes
        if phone is not None:
            self.phone = phone

    @property
    def name(self):
        """Gets the name of this Contact.  # noqa: E501


        :return: The name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contact.


        :param name: The name of this Contact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this Contact.  # noqa: E501


        :return: The email of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.


        :param email: The email of this Contact.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def contact_type(self):
        """Gets the contact_type of this Contact.  # noqa: E501


        :return: The contact_type of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this Contact.


        :param contact_type: The contact_type of this Contact.  # noqa: E501
        :type: str
        """

        self._contact_type = contact_type

    @property
    def notes(self):
        """Gets the notes of this Contact.  # noqa: E501


        :return: The notes of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Contact.


        :param notes: The notes of this Contact.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def phone(self):
        """Gets the phone of this Contact.  # noqa: E501


        :return: The phone of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Contact.


        :param phone: The phone of this Contact.  # noqa: E501
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
