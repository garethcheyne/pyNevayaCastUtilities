# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ReservationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_reservations(self, **kwargs):  # noqa: E501
        """Delete reservation(s)  # noqa: E501

        Check a guest out of a room by deleting the reservation. Specifying `guest_id` checks that guest out of all rooms they currently have a reservation for. `reservation_id` or `guest_id` is required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_reservations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reservation_id: The reservation ID to delete
        :param str guest_id: The guest ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_reservations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_reservations_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_reservations_with_http_info(self, **kwargs):  # noqa: E501
        """Delete reservation(s)  # noqa: E501

        Check a guest out of a room by deleting the reservation. Specifying `guest_id` checks that guest out of all rooms they currently have a reservation for. `reservation_id` or `guest_id` is required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_reservations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reservation_id: The reservation ID to delete
        :param str guest_id: The guest ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reservation_id', 'guest_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_reservations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reservation_id' in params:
            query_params.append(('reservation_id', params['reservation_id']))  # noqa: E501
        if 'guest_id' in params:
            query_params.append(('guest_id', params['guest_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/reservations', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_profiles(self, **kwargs):  # noqa: E501
        """Get a list of available account profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: The company ID
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_account_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_account_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of available account profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: The company ID
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/account-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reservations(self, **kwargs):  # noqa: E501
        """Get reservations  # noqa: E501

        Get all the reservations matching the specified filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reservations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: May be ignored depending on user access rights, for example if the user only has access to a single site that sites' ID will be used
        :param str room_id: The room ID
        :param str guest_id: The guest ID
        :param str room_name_cont: The room name contains the value
        :param str reservation_number: Reservation number usually assigned by the PMS
        :param str room_name_eq: The room name matches the value exactly
        :param str guest_first_name_eq: The guests first name matches the value exactly
        :param str guest_first_name_cont: The guests first name contains the value
        :param str guest_last_name_cont: The guests last name contains the value
        :param str guest_last_name_eq: The guests last name matches the value exactly
        :param str room_ids: Comma separated list of Room IDs
        :param str guest_ids: Comma separated list of Guest IDs
        :param int page: Required page number in paginated results
        :param int per_page: Number of results per page
        :param str pms_id: ID assigned by the PMS
        :param str pms_ids: Comma separated list of PMS IDs
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reservations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_reservations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_reservations_with_http_info(self, **kwargs):  # noqa: E501
        """Get reservations  # noqa: E501

        Get all the reservations matching the specified filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reservations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: May be ignored depending on user access rights, for example if the user only has access to a single site that sites' ID will be used
        :param str room_id: The room ID
        :param str guest_id: The guest ID
        :param str room_name_cont: The room name contains the value
        :param str reservation_number: Reservation number usually assigned by the PMS
        :param str room_name_eq: The room name matches the value exactly
        :param str guest_first_name_eq: The guests first name matches the value exactly
        :param str guest_first_name_cont: The guests first name contains the value
        :param str guest_last_name_cont: The guests last name contains the value
        :param str guest_last_name_eq: The guests last name matches the value exactly
        :param str room_ids: Comma separated list of Room IDs
        :param str guest_ids: Comma separated list of Guest IDs
        :param int page: Required page number in paginated results
        :param int per_page: Number of results per page
        :param str pms_id: ID assigned by the PMS
        :param str pms_ids: Comma separated list of PMS IDs
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'room_id', 'guest_id', 'room_name_cont', 'reservation_number', 'room_name_eq', 'guest_first_name_eq', 'guest_first_name_cont', 'guest_last_name_cont', 'guest_last_name_eq', 'room_ids', 'guest_ids', 'page', 'per_page', 'pms_id', 'pms_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reservations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'room_id' in params:
            query_params.append(('room_id', params['room_id']))  # noqa: E501
        if 'guest_id' in params:
            query_params.append(('guest_id', params['guest_id']))  # noqa: E501
        if 'room_name_cont' in params:
            query_params.append(('room_name_cont', params['room_name_cont']))  # noqa: E501
        if 'reservation_number' in params:
            query_params.append(('reservation_number', params['reservation_number']))  # noqa: E501
        if 'room_name_eq' in params:
            query_params.append(('room_name_eq', params['room_name_eq']))  # noqa: E501
        if 'guest_first_name_eq' in params:
            query_params.append(('guest_first_name_eq', params['guest_first_name_eq']))  # noqa: E501
        if 'guest_first_name_cont' in params:
            query_params.append(('guest_first_name_cont', params['guest_first_name_cont']))  # noqa: E501
        if 'guest_last_name_cont' in params:
            query_params.append(('guest_last_name_cont', params['guest_last_name_cont']))  # noqa: E501
        if 'guest_last_name_eq' in params:
            query_params.append(('guest_last_name_eq', params['guest_last_name_eq']))  # noqa: E501
        if 'room_ids' in params:
            query_params.append(('room_ids', params['room_ids']))  # noqa: E501
        if 'guest_ids' in params:
            query_params.append(('guest_ids', params['guest_ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'pms_id' in params:
            query_params.append(('pms_id', params['pms_id']))  # noqa: E501
        if 'pms_ids' in params:
            query_params.append(('pms_ids', params['pms_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/reservations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reservations_id(self, id, **kwargs):  # noqa: E501
        """Retrieve a reservation  # noqa: E501

        Get the specified reservation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reservations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the resource (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reservations_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reservations_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_reservations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve a reservation  # noqa: E501

        Get the specified reservation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reservations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the resource (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reservations_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_reservations_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/reservations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_get_reservations(self, **kwargs):  # noqa: E501
        """Get reservations  # noqa: E501

        Option to use post in case query would exceed the GET size limits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_get_reservations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReservationsBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_get_reservations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_get_reservations_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_get_reservations_with_http_info(self, **kwargs):  # noqa: E501
        """Get reservations  # noqa: E501

        Option to use post in case query would exceed the GET size limits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_get_reservations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReservationsBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_get_reservations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/reservations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_reservations(self, **kwargs):  # noqa: E501
        """Check a guest into a room  # noqa: E501

        Create a reservation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_reservations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReservationForm body: Requires either a guest ID or the guests first and last names. Automatically creates a guest if no matching guests are found.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_reservations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_reservations_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_reservations_with_http_info(self, **kwargs):  # noqa: E501
        """Check a guest into a room  # noqa: E501

        Create a reservation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_reservations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReservationForm body: Requires either a guest ID or the guests first and last names. Automatically creates a guest if no matching guests are found.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_reservations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/reservations/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_reservations_id(self, id, **kwargs):  # noqa: E501
        """Update a reservation  # noqa: E501

        Update the specified reservation. Partial updates are supported  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_reservations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the resource (required)
        :param ReservationForm body:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_reservations_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_reservations_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_reservations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a reservation  # noqa: E501

        Update the specified reservation. Partial updates are supported  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_reservations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the resource (required)
        :param ReservationForm body:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_reservations_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_reservations_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/reservations/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
