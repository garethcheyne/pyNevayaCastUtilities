# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuthApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_auth(self, **kwargs):  # noqa: E501
        """Generate an auth token  # noqa: E501

        Generate a JSON web token to be used to authenticate future API calls.  To get your API token go to https://portal.nevaya.net and sign in. Clicking the ![blue button](https://nevaya-site-data.s3-eu-west-1.amazonaws.com/openapi/api-key-button.png \"API key\") in the banner copies your API key to the clipboard. **Do not share your key with anyone.**  If you don't see the button it may be that your account doesn't have access to the API, please contact Nevaya support to have it added.   Generated tokens will expire automatically after six months, but can be expired at any time before then. Should that happen a `401` error will be returned from any protected API call, at which point a new token should be generated and used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthBody body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_auth_with_http_info(self, **kwargs):  # noqa: E501
        """Generate an auth token  # noqa: E501

        Generate a JSON web token to be used to authenticate future API calls.  To get your API token go to https://portal.nevaya.net and sign in. Clicking the ![blue button](https://nevaya-site-data.s3-eu-west-1.amazonaws.com/openapi/api-key-button.png \"API key\") in the banner copies your API key to the clipboard. **Do not share your key with anyone.**  If you don't see the button it may be that your account doesn't have access to the API, please contact Nevaya support to have it added.   Generated tokens will expire automatically after six months, but can be expired at any time before then. Should that happen a `401` error will be returned from any protected API call, at which point a new token should be generated and used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthBody body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
