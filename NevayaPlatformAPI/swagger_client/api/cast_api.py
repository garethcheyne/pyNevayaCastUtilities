# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CastApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_cast_chromecasts(self, **kwargs):  # noqa: E501
        """Get a list of chromecasts  # noqa: E501

        Get a list of chromecasts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cast_chromecasts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Required page number in paginated results
        :param int per_page: Number of results per page
        :param str room_name_eq: The room name matches the value exactly
        :param str room_name_cont: The room name contains the value
        :param str site_id: The site ID
        :param str room_ids: Comma separated list of Room IDs
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cast_chromecasts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cast_chromecasts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cast_chromecasts_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of chromecasts  # noqa: E501

        Get a list of chromecasts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cast_chromecasts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Required page number in paginated results
        :param int per_page: Number of results per page
        :param str room_name_eq: The room name matches the value exactly
        :param str room_name_cont: The room name contains the value
        :param str site_id: The site ID
        :param str room_ids: Comma separated list of Room IDs
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'room_name_eq', 'room_name_cont', 'site_id', 'room_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cast_chromecasts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'room_name_eq' in params:
            query_params.append(('room_name_eq', params['room_name_eq']))  # noqa: E501
        if 'room_name_cont' in params:
            query_params.append(('room_name_cont', params['room_name_cont']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'room_ids' in params:
            query_params.append(('room_ids', params['room_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/chromecasts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cast_chromecasts_id(self, chromecast_id, **kwargs):  # noqa: E501
        """Get a chromecast  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cast_chromecasts_id(chromecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chromecast_id: The ID of the chromecast (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cast_chromecasts_id_with_http_info(chromecast_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cast_chromecasts_id_with_http_info(chromecast_id, **kwargs)  # noqa: E501
            return data

    def get_cast_chromecasts_id_with_http_info(self, chromecast_id, **kwargs):  # noqa: E501
        """Get a chromecast  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cast_chromecasts_id_with_http_info(chromecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chromecast_id: The ID of the chromecast (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chromecast_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cast_chromecasts_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chromecast_id' is set
        if ('chromecast_id' not in params or
                params['chromecast_id'] is None):
            raise ValueError("Missing the required parameter `chromecast_id` when calling `get_cast_chromecasts_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chromecast_id' in params:
            path_params['chromecast_id'] = params['chromecast_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/chromecasts/{chromecast_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cast_connections(self, **kwargs):  # noqa: E501
        """Get all valid connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cast_connections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Required page number in paginated results
        :param int per_page: Number of results per page
        :param str site_id: May be ignored depending on user access rights, for example if the user only has access to a single site that sites' ID will be used
        :param str room_name_eq: The room name matches the value exactly
        :param str room_name_cont: The room name contains the value
        :param str guest_first_name_eq: The guests first name matches the value exactly
        :param str guest_last_name_eq: The guests last name matches the value exactly
        :param str guest_first_name_cont: The guests first name contains the value
        :param str guest_last_name_cont: The guests last name contains the value
        :param str guest_id: The guest ID
        :param str room_id: The room ID
        :param str chromecast_id: The chromecast ID
        :param str guest_ids: Comma separated list of Guest IDs
        :param str room_ids: Comma separated list of Room IDs
        :param str chromecast_ids: Comma separated list of Chromecast IDs
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cast_connections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cast_connections_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cast_connections_with_http_info(self, **kwargs):  # noqa: E501
        """Get all valid connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cast_connections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Required page number in paginated results
        :param int per_page: Number of results per page
        :param str site_id: May be ignored depending on user access rights, for example if the user only has access to a single site that sites' ID will be used
        :param str room_name_eq: The room name matches the value exactly
        :param str room_name_cont: The room name contains the value
        :param str guest_first_name_eq: The guests first name matches the value exactly
        :param str guest_last_name_eq: The guests last name matches the value exactly
        :param str guest_first_name_cont: The guests first name contains the value
        :param str guest_last_name_cont: The guests last name contains the value
        :param str guest_id: The guest ID
        :param str room_id: The room ID
        :param str chromecast_id: The chromecast ID
        :param str guest_ids: Comma separated list of Guest IDs
        :param str room_ids: Comma separated list of Room IDs
        :param str chromecast_ids: Comma separated list of Chromecast IDs
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'site_id', 'room_name_eq', 'room_name_cont', 'guest_first_name_eq', 'guest_last_name_eq', 'guest_first_name_cont', 'guest_last_name_cont', 'guest_id', 'room_id', 'chromecast_id', 'guest_ids', 'room_ids', 'chromecast_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cast_connections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'room_name_eq' in params:
            query_params.append(('room_name_eq', params['room_name_eq']))  # noqa: E501
        if 'room_name_cont' in params:
            query_params.append(('room_name_cont', params['room_name_cont']))  # noqa: E501
        if 'guest_first_name_eq' in params:
            query_params.append(('guest_first_name_eq', params['guest_first_name_eq']))  # noqa: E501
        if 'guest_last_name_eq' in params:
            query_params.append(('guest_last_name_eq', params['guest_last_name_eq']))  # noqa: E501
        if 'guest_first_name_cont' in params:
            query_params.append(('guest_first_name_cont', params['guest_first_name_cont']))  # noqa: E501
        if 'guest_last_name_cont' in params:
            query_params.append(('guest_last_name_cont', params['guest_last_name_cont']))  # noqa: E501
        if 'guest_id' in params:
            query_params.append(('guest_id', params['guest_id']))  # noqa: E501
        if 'room_id' in params:
            query_params.append(('room_id', params['room_id']))  # noqa: E501
        if 'chromecast_id' in params:
            query_params.append(('chromecast_id', params['chromecast_id']))  # noqa: E501
        if 'guest_ids' in params:
            query_params.append(('guest_ids', params['guest_ids']))  # noqa: E501
        if 'room_ids' in params:
            query_params.append(('room_ids', params['room_ids']))  # noqa: E501
        if 'chromecast_ids' in params:
            query_params.append(('chromecast_ids', params['chromecast_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cast_chromecasts(self, **kwargs):  # noqa: E501
        """Get a list of chromecasts  # noqa: E501

        Option to use post in case query would exceed the GET size limits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_chromecasts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CastChromecastsBody body:
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cast_chromecasts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_cast_chromecasts_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_cast_chromecasts_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of chromecasts  # noqa: E501

        Option to use post in case query would exceed the GET size limits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_chromecasts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CastChromecastsBody body:
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cast_chromecasts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/chromecasts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cast_chromecasts_id_reboot(self, **kwargs):  # noqa: E501
        """Reboot the chromecast(s)  # noqa: E501

        Reboot the specified chromecast(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_chromecasts_id_reboot(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChromecastsRebootBody body: Either `chromecast_id` is specified or a non empty `chromecast_ids` array is required. If both are specified then `chromecast_ids` is ignored
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cast_chromecasts_id_reboot_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_cast_chromecasts_id_reboot_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_cast_chromecasts_id_reboot_with_http_info(self, **kwargs):  # noqa: E501
        """Reboot the chromecast(s)  # noqa: E501

        Reboot the specified chromecast(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_chromecasts_id_reboot_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChromecastsRebootBody body: Either `chromecast_id` is specified or a non empty `chromecast_ids` array is required. If both are specified then `chromecast_ids` is ignored
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cast_chromecasts_id_reboot" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/chromecasts/reboot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cast_chromecasts_id_reset(self, **kwargs):  # noqa: E501
        """Reset the chromecast(s)  # noqa: E501

        Load the Nevaya application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_chromecasts_id_reset(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChromecastsResetBody body: Either `chromecast_id` is specified or a non empty `chromecast_ids` array is required. If both are specified then `chromecast_ids` is ignored
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cast_chromecasts_id_reset_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_cast_chromecasts_id_reset_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_cast_chromecasts_id_reset_with_http_info(self, **kwargs):  # noqa: E501
        """Reset the chromecast(s)  # noqa: E501

        Load the Nevaya application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_chromecasts_id_reset_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChromecastsResetBody body: Either `chromecast_id` is specified or a non empty `chromecast_ids` array is required. If both are specified then `chromecast_ids` is ignored
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cast_chromecasts_id_reset" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/chromecasts/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cast_chromecasts_pairing_codes(self, **kwargs):  # noqa: E501
        """Get the pairing codes for the chromecast(s)  # noqa: E501

        Pairing codes expire so they must be fetched occasionally. Optionally return a QR code in SVG  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_chromecasts_pairing_codes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChromecastsPairingcodesBody body:
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cast_chromecasts_pairing_codes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_cast_chromecasts_pairing_codes_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_cast_chromecasts_pairing_codes_with_http_info(self, **kwargs):  # noqa: E501
        """Get the pairing codes for the chromecast(s)  # noqa: E501

        Pairing codes expire so they must be fetched occasionally. Optionally return a QR code in SVG  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_chromecasts_pairing_codes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChromecastsPairingcodesBody body:
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cast_chromecasts_pairing_codes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/chromecasts/pairing-codes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cast_connections(self, **kwargs):  # noqa: E501
        """Get all valid connections  # noqa: E501

        Option to use post in case query would exceed the GET size limits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_connections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CastConnectionsBody body:
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cast_connections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_cast_connections_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_cast_connections_with_http_info(self, **kwargs):  # noqa: E501
        """Get all valid connections  # noqa: E501

        Option to use post in case query would exceed the GET size limits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_connections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CastConnectionsBody body:
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cast_connections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/connections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cast_connections_connect(self, **kwargs):  # noqa: E501
        """Connect a guest device  # noqa: E501

        Create a connection between a guest device and a chromecast  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_connections_connect(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectionsConnectBody body: `guest_device_id` or `guest_device_mac` must be present.

`hours` can be specified as the number of hours before the connection is automatically expired, or `permanent` to ensure the connection is never automatically expired. Defaults to the configured value in the Nevaya Cast application.

        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cast_connections_connect_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_cast_connections_connect_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_cast_connections_connect_with_http_info(self, **kwargs):  # noqa: E501
        """Connect a guest device  # noqa: E501

        Create a connection between a guest device and a chromecast  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_connections_connect_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectionsConnectBody body: `guest_device_id` or `guest_device_mac` must be present.

`hours` can be specified as the number of hours before the connection is automatically expired, or `permanent` to ensure the connection is never automatically expired. Defaults to the configured value in the Nevaya Cast application.

        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cast_connections_connect" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/connections/connect', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cast_connections_expire(self, **kwargs):  # noqa: E501
        """Expire connections  # noqa: E501

        All guest device connections that match the applied filter will be expired. No connections will be expired if there isn't at least one filter present.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_connections_expire(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectionsExpireBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cast_connections_expire_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_cast_connections_expire_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_cast_connections_expire_with_http_info(self, **kwargs):  # noqa: E501
        """Expire connections  # noqa: E501

        All guest device connections that match the applied filter will be expired. No connections will be expired if there isn't at least one filter present.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cast_connections_expire_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectionsExpireBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cast_connections_expire" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/connections/expire', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_cast_chromecasts_id(self, chromecast_id, **kwargs):  # noqa: E501
        """Update a chromecast  # noqa: E501

        Update a chromecast  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cast_chromecasts_id(chromecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chromecast_id: The ID of the chromecast (required)
        :param ChromecastsChromecastIdBody body:
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_cast_chromecasts_id_with_http_info(chromecast_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_cast_chromecasts_id_with_http_info(chromecast_id, **kwargs)  # noqa: E501
            return data

    def put_cast_chromecasts_id_with_http_info(self, chromecast_id, **kwargs):  # noqa: E501
        """Update a chromecast  # noqa: E501

        Update a chromecast  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cast_chromecasts_id_with_http_info(chromecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chromecast_id: The ID of the chromecast (required)
        :param ChromecastsChromecastIdBody body:
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chromecast_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_cast_chromecasts_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chromecast_id' is set
        if ('chromecast_id' not in params or
                params['chromecast_id'] is None):
            raise ValueError("Missing the required parameter `chromecast_id` when calling `put_cast_chromecasts_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chromecast_id' in params:
            path_params['chromecast_id'] = params['chromecast_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/cast/chromecasts/{chromecast_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
