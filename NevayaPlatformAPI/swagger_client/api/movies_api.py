# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MoviesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_guests_id_movies(self, **kwargs):  # noqa: E501
        """Get all the movies purchased  # noqa: E501

        Returns a list of all valid movies for the given `guest_id`, `reservation_id` or `room_id`.   At least one field is required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_guests_id_movies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str room_id: The room ID
        :param str reservation_id: The reservation ID
        :param str guest_id: The guest ID
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_guests_id_movies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_guests_id_movies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_guests_id_movies_with_http_info(self, **kwargs):  # noqa: E501
        """Get all the movies purchased  # noqa: E501

        Returns a list of all valid movies for the given `guest_id`, `reservation_id` or `room_id`.   At least one field is required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_guests_id_movies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str room_id: The room ID
        :param str reservation_id: The reservation ID
        :param str guest_id: The guest ID
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['room_id', 'reservation_id', 'guest_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_guests_id_movies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in params:
            query_params.append(('room_id', params['room_id']))  # noqa: E501
        if 'reservation_id' in params:
            query_params.append(('reservation_id', params['reservation_id']))  # noqa: E501
        if 'guest_id' in params:
            query_params.append(('guest_id', params['guest_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/movies/purchases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_movies(self, **kwargs):  # noqa: E501
        """Get the available movies  # noqa: E501

        Returns all the movies for the site or room. If `room_id` is specified then `site_id` is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_movies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: May be ignored depending on user access rights, for example if the user only has access to a single site that sites' ID will be used
        :param str room_id: The room ID
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_movies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_movies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_movies_with_http_info(self, **kwargs):  # noqa: E501
        """Get the available movies  # noqa: E501

        Returns all the movies for the site or room. If `room_id` is specified then `site_id` is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_movies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: May be ignored depending on user access rights, for example if the user only has access to a single site that sites' ID will be used
        :param str room_id: The room ID
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'room_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_movies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'room_id' in params:
            query_params.append(('room_id', params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/movies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_movies_purchases(self, **kwargs):  # noqa: E501
        """Purchase a movie  # noqa: E501

        Purchase a movie  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_movies_purchases(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoviesPurchasesBody body: If purchase is made using `room_id` then the main guest will be used, the first guest checked into a room in the case of multiple reservations for a single room. Only one field is required, but if `room_id` is specified it will be ignored in preference to either the `guest_id` or `reservation_id`.

If there is already a valid purchase for the movie and guest then that will be returned. 
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_movies_purchases_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_movies_purchases_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_movies_purchases_with_http_info(self, **kwargs):  # noqa: E501
        """Purchase a movie  # noqa: E501

        Purchase a movie  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_movies_purchases_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoviesPurchasesBody body: If purchase is made using `room_id` then the main guest will be used, the first guest checked into a room in the case of multiple reservations for a single room. Only one field is required, but if `room_id` is specified it will be ignored in preference to either the `guest_id` or `reservation_id`.

If there is already a valid purchase for the movie and guest then that will be returned. 
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_movies_purchases" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/movies/purchases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
