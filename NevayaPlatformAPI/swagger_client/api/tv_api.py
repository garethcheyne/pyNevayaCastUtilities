# coding: utf-8

"""
    Nevaya Platform

    Access to everything Nevaya  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@nevaya.co.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TVApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_tv_receivers(self, **kwargs):  # noqa: E501
        """Get receivers  # noqa: E501

        Get the list of receivers (TVs, STBs etc)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: May be ignored depending on user access rights, for example if the user only has access to a single site that sites' ID will be used
        :param int page: Required page number in paginated results
        :param int per_page: Number of results per page
        :param str receiver_ids: Comma separated list of receiver IDs
        :param str room_id: The room ID
        :param str room_name_eq: The room name matches the value exactly
        :param str room_name_cont: The room name contains the value
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tv_receivers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tv_receivers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tv_receivers_with_http_info(self, **kwargs):  # noqa: E501
        """Get receivers  # noqa: E501

        Get the list of receivers (TVs, STBs etc)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: May be ignored depending on user access rights, for example if the user only has access to a single site that sites' ID will be used
        :param int page: Required page number in paginated results
        :param int per_page: Number of results per page
        :param str receiver_ids: Comma separated list of receiver IDs
        :param str room_id: The room ID
        :param str room_name_eq: The room name matches the value exactly
        :param str room_name_cont: The room name contains the value
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'page', 'per_page', 'receiver_ids', 'room_id', 'room_name_eq', 'room_name_cont']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tv_receivers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'receiver_ids' in params:
            query_params.append(('receiver_ids', params['receiver_ids']))  # noqa: E501
        if 'room_id' in params:
            query_params.append(('room_id', params['room_id']))  # noqa: E501
        if 'room_name_eq' in params:
            query_params.append(('room_name_eq', params['room_name_eq']))  # noqa: E501
        if 'room_name_cont' in params:
            query_params.append(('room_name_cont', params['room_name_cont']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tv_receivers_embeddable_remote(self, receiver_id, **kwargs):  # noqa: E501
        """Get a link to an application that can be displayed in an iframe  # noqa: E501

        Returns a URL with an access token (JWT) for the specified receiver.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_embeddable_remote(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :param datetime expires_at: When should the token expire
        :param str background: Background colour
        :param str button: Button background colour, an appropriate text colour will be automatically chosen
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tv_receivers_embeddable_remote_with_http_info(receiver_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tv_receivers_embeddable_remote_with_http_info(receiver_id, **kwargs)  # noqa: E501
            return data

    def get_tv_receivers_embeddable_remote_with_http_info(self, receiver_id, **kwargs):  # noqa: E501
        """Get a link to an application that can be displayed in an iframe  # noqa: E501

        Returns a URL with an access token (JWT) for the specified receiver.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_embeddable_remote_with_http_info(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :param datetime expires_at: When should the token expire
        :param str background: Background colour
        :param str button: Button background colour, an appropriate text colour will be automatically chosen
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['receiver_id', 'expires_at', 'background', 'button']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tv_receivers_embeddable_remote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'receiver_id' is set
        if ('receiver_id' not in params or
                params['receiver_id'] is None):
            raise ValueError("Missing the required parameter `receiver_id` when calling `get_tv_receivers_embeddable_remote`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'receiver_id' in params:
            query_params.append(('receiver_id', params['receiver_id']))  # noqa: E501
        if 'expires_at' in params:
            query_params.append(('expires_at', params['expires_at']))  # noqa: E501
        if 'background' in params:
            query_params.append(('background', params['background']))  # noqa: E501
        if 'button' in params:
            query_params.append(('button', params['button']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/embeddable-remote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tv_receivers_id_applications(self, receiver_id, **kwargs):  # noqa: E501
        """Get a list of applications available to the receiver  # noqa: E501

        These are pre-installed applications such as YouTube etc  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_applications(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tv_receivers_id_applications_with_http_info(receiver_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tv_receivers_id_applications_with_http_info(receiver_id, **kwargs)  # noqa: E501
            return data

    def get_tv_receivers_id_applications_with_http_info(self, receiver_id, **kwargs):  # noqa: E501
        """Get a list of applications available to the receiver  # noqa: E501

        These are pre-installed applications such as YouTube etc  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_applications_with_http_info(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['receiver_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tv_receivers_id_applications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'receiver_id' is set
        if ('receiver_id' not in params or
                params['receiver_id'] is None):
            raise ValueError("Missing the required parameter `receiver_id` when calling `get_tv_receivers_id_applications`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'receiver_id' in params:
            query_params.append(('receiver_id', params['receiver_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tv_receivers_id_channels(self, receiver_id, **kwargs):  # noqa: E501
        """Get all channels available to a receiver  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_channels(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tv_receivers_id_channels_with_http_info(receiver_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tv_receivers_id_channels_with_http_info(receiver_id, **kwargs)  # noqa: E501
            return data

    def get_tv_receivers_id_channels_with_http_info(self, receiver_id, **kwargs):  # noqa: E501
        """Get all channels available to a receiver  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_channels_with_http_info(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['receiver_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tv_receivers_id_channels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'receiver_id' is set
        if ('receiver_id' not in params or
                params['receiver_id'] is None):
            raise ValueError("Missing the required parameter `receiver_id` when calling `get_tv_receivers_id_channels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'receiver_id' in params:
            query_params.append(('receiver_id', params['receiver_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/channels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tv_receivers_id_data(self, receiver_id, **kwargs):  # noqa: E501
        """Get all the data for a receiver  # noqa: E501

        Includes movies, channels, videos etc  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_data(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tv_receivers_id_data_with_http_info(receiver_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tv_receivers_id_data_with_http_info(receiver_id, **kwargs)  # noqa: E501
            return data

    def get_tv_receivers_id_data_with_http_info(self, receiver_id, **kwargs):  # noqa: E501
        """Get all the data for a receiver  # noqa: E501

        Includes movies, channels, videos etc  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_data_with_http_info(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['receiver_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tv_receivers_id_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'receiver_id' is set
        if ('receiver_id' not in params or
                params['receiver_id'] is None):
            raise ValueError("Missing the required parameter `receiver_id` when calling `get_tv_receivers_id_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'receiver_id' in params:
            query_params.append(('receiver_id', params['receiver_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tv_receivers_id_movies(self, receiver_id, **kwargs):  # noqa: E501
        """Get all movies available to the receiver  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_movies(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tv_receivers_id_movies_with_http_info(receiver_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tv_receivers_id_movies_with_http_info(receiver_id, **kwargs)  # noqa: E501
            return data

    def get_tv_receivers_id_movies_with_http_info(self, receiver_id, **kwargs):  # noqa: E501
        """Get all movies available to the receiver  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_movies_with_http_info(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['receiver_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tv_receivers_id_movies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'receiver_id' is set
        if ('receiver_id' not in params or
                params['receiver_id'] is None):
            raise ValueError("Missing the required parameter `receiver_id` when calling `get_tv_receivers_id_movies`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'receiver_id' in params:
            query_params.append(('receiver_id', params['receiver_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/movies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tv_receivers_id_sources(self, receiver_id, **kwargs):  # noqa: E501
        """Get external sources for a receiver  # noqa: E501

        Returns a list of defined external sources for the receiver, i.e. HDMI 1, HDMI 2 etc  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_sources(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tv_receivers_id_sources_with_http_info(receiver_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tv_receivers_id_sources_with_http_info(receiver_id, **kwargs)  # noqa: E501
            return data

    def get_tv_receivers_id_sources_with_http_info(self, receiver_id, **kwargs):  # noqa: E501
        """Get external sources for a receiver  # noqa: E501

        Returns a list of defined external sources for the receiver, i.e. HDMI 1, HDMI 2 etc  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_sources_with_http_info(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['receiver_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tv_receivers_id_sources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'receiver_id' is set
        if ('receiver_id' not in params or
                params['receiver_id'] is None):
            raise ValueError("Missing the required parameter `receiver_id` when calling `get_tv_receivers_id_sources`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'receiver_id' in params:
            query_params.append(('receiver_id', params['receiver_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/sources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tv_receivers_id_videos(self, receiver_id, **kwargs):  # noqa: E501
        """Get videos for a receiver  # noqa: E501

        Get a list of unencrypted HLS streams associated with the receiver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_videos(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tv_receivers_id_videos_with_http_info(receiver_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tv_receivers_id_videos_with_http_info(receiver_id, **kwargs)  # noqa: E501
            return data

    def get_tv_receivers_id_videos_with_http_info(self, receiver_id, **kwargs):  # noqa: E501
        """Get videos for a receiver  # noqa: E501

        Get a list of unencrypted HLS streams associated with the receiver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tv_receivers_id_videos_with_http_info(receiver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str receiver_id: The receiver ID (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['receiver_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tv_receivers_id_videos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'receiver_id' is set
        if ('receiver_id' not in params or
                params['receiver_id'] is None):
            raise ValueError("Missing the required parameter `receiver_id` when calling `get_tv_receivers_id_videos`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'receiver_id' in params:
            query_params.append(('receiver_id', params['receiver_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tv_receivers(self, **kwargs):  # noqa: E501
        """Get receivers  # noqa: E501

        Get the list of receivers (TVs, STBs etc). Returns the same as the `GET` version but by using `POST` it allows more filter options to be applied without hitting any limits on `GET` requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TvReceiversBody body:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tv_receivers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tv_receivers_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tv_receivers_with_http_info(self, **kwargs):  # noqa: E501
        """Get receivers  # noqa: E501

        Get the list of receivers (TVs, STBs etc). Returns the same as the `GET` version but by using `POST` it allows more filter options to be applied without hitting any limits on `GET` requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TvReceiversBody body:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tv_receivers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tv_receivers_control(self, **kwargs):  # noqa: E501
        """Control multiple receivers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_control(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ReceiversControlBody] body: Send multiple control operations to multiple receivers. `receiver_id` or `room_tag_id` is required, if both are provided then `room_tag_id` will be ignored.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tv_receivers_control_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tv_receivers_control_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tv_receivers_control_with_http_info(self, **kwargs):  # noqa: E501
        """Control multiple receivers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_control_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ReceiversControlBody] body: Send multiple control operations to multiple receivers. `receiver_id` or `room_tag_id` is required, if both are provided then `room_tag_id` will be ignored.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tv_receivers_control" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/control', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tv_receivers_id_applications_close(self, **kwargs):  # noqa: E501
        """Close the currently open application on the receiver(s)  # noqa: E501

        Closes the current application (Youtube, Netflix etc) and returns the receiver to the home screen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_applications_close(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationsCloseBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tv_receivers_id_applications_close_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tv_receivers_id_applications_close_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tv_receivers_id_applications_close_with_http_info(self, **kwargs):  # noqa: E501
        """Close the currently open application on the receiver(s)  # noqa: E501

        Closes the current application (Youtube, Netflix etc) and returns the receiver to the home screen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_applications_close_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationsCloseBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tv_receivers_id_applications_close" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/applications/close', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tv_receivers_id_applications_open(self, **kwargs):  # noqa: E501
        """Open an application on the receiver(s)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_applications_open(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationsOpenBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tv_receivers_id_applications_open_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tv_receivers_id_applications_open_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tv_receivers_id_applications_open_with_http_info(self, **kwargs):  # noqa: E501
        """Open an application on the receiver(s)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_applications_open_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationsOpenBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tv_receivers_id_applications_open" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/applications/open', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tv_receivers_id_channels_play(self, **kwargs):  # noqa: E501
        """Change the channel on the receiver(s)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_channels_play(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChannelsPlayBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tv_receivers_id_channels_play_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tv_receivers_id_channels_play_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tv_receivers_id_channels_play_with_http_info(self, **kwargs):  # noqa: E501
        """Change the channel on the receiver(s)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_channels_play_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChannelsPlayBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tv_receivers_id_channels_play" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/channels/play', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tv_receivers_id_movies_play(self, **kwargs):  # noqa: E501
        """Play a movie on a receiver  # noqa: E501

        Play a purchased movie on the receiver.   Requires `vod_accessible` to be true.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_movies_play(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoviesPlayBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tv_receivers_id_movies_play_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tv_receivers_id_movies_play_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tv_receivers_id_movies_play_with_http_info(self, **kwargs):  # noqa: E501
        """Play a movie on a receiver  # noqa: E501

        Play a purchased movie on the receiver.   Requires `vod_accessible` to be true.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_movies_play_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoviesPlayBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tv_receivers_id_movies_play" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/movies/play', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tv_receivers_id_sources_exit(self, **kwargs):  # noqa: E501
        """Exit the current external source on the receiver(s)  # noqa: E501

        Exits the current external source and returns the receiver to it's home screen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_sources_exit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SourcesExitBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tv_receivers_id_sources_exit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tv_receivers_id_sources_exit_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tv_receivers_id_sources_exit_with_http_info(self, **kwargs):  # noqa: E501
        """Exit the current external source on the receiver(s)  # noqa: E501

        Exits the current external source and returns the receiver to it's home screen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_sources_exit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SourcesExitBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tv_receivers_id_sources_exit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/sources/exit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tv_receivers_id_sources_switch(self, **kwargs):  # noqa: E501
        """Switch external source on the receiver(s)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_sources_switch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SourcesSwitchBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tv_receivers_id_sources_switch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tv_receivers_id_sources_switch_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tv_receivers_id_sources_switch_with_http_info(self, **kwargs):  # noqa: E501
        """Switch external source on the receiver(s)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_sources_switch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SourcesSwitchBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tv_receivers_id_sources_switch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/sources/switch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tv_receivers_id_videos_play(self, **kwargs):  # noqa: E501
        """Play a video on the receiver(s)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_videos_play(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VideosPlayBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tv_receivers_id_videos_play_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tv_receivers_id_videos_play_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tv_receivers_id_videos_play_with_http_info(self, **kwargs):  # noqa: E501
        """Play a video on the receiver(s)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_id_videos_play_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VideosPlayBody body: At least one of `receiver_id`, `room_tag_id` or a non empty list of receiver IDs is required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tv_receivers_id_videos_play" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/videos/play', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tv_receivers_pairing_codes(self, **kwargs):  # noqa: E501
        """Get the pairing codes for the receiver(s)  # noqa: E501

        Optionally return a URL to the QR code image that matches the pairing code by setting `qr` to `true`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_pairing_codes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReceiversPairingcodesBody body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tv_receivers_pairing_codes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_tv_receivers_pairing_codes_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_tv_receivers_pairing_codes_with_http_info(self, **kwargs):  # noqa: E501
        """Get the pairing codes for the receiver(s)  # noqa: E501

        Optionally return a URL to the QR code image that matches the pairing code by setting `qr` to `true`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tv_receivers_pairing_codes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReceiversPairingcodesBody body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tv_receivers_pairing_codes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/tv/receivers/pairing-codes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
